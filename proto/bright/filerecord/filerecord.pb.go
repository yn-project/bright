// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.18.1
// source: bright/filerecord/filerecord.proto

package filerecord

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	_ "yun.tea/block/bright/proto/bright"
	_ "yun.tea/block/bright/proto/bright/basetype"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileRecordState int32

const (
	FileRecordState_FileRecordDefault FileRecordState = 0
	FileRecordState_FileRecordSuccess FileRecordState = 10
	FileRecordState_FileRecordFailed  FileRecordState = 20
)

// Enum value maps for FileRecordState.
var (
	FileRecordState_name = map[int32]string{
		0:  "FileRecordDefault",
		10: "FileRecordSuccess",
		20: "FileRecordFailed",
	}
	FileRecordState_value = map[string]int32{
		"FileRecordDefault": 0,
		"FileRecordSuccess": 10,
		"FileRecordFailed":  20,
	}
)

func (x FileRecordState) Enum() *FileRecordState {
	p := new(FileRecordState)
	*p = x
	return p
}

func (x FileRecordState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileRecordState) Descriptor() protoreflect.EnumDescriptor {
	return file_bright_filerecord_filerecord_proto_enumTypes[0].Descriptor()
}

func (FileRecordState) Type() protoreflect.EnumType {
	return &file_bright_filerecord_filerecord_proto_enumTypes[0]
}

func (x FileRecordState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileRecordState.Descriptor instead.
func (FileRecordState) EnumDescriptor() ([]byte, []int) {
	return file_bright_filerecord_filerecord_proto_rawDescGZIP(), []int{0}
}

type FileRecordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        *string          `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	FileName  *string          `protobuf:"bytes,20,opt,name=FileName,proto3,oneof" json:"FileName,omitempty"`
	TopicID   *string          `protobuf:"bytes,30,opt,name=TopicID,proto3,oneof" json:"TopicID,omitempty"`
	RecordNum *uint32          `protobuf:"varint,40,opt,name=RecordNum,proto3,oneof" json:"RecordNum,omitempty"`
	Sha1Sum   *string          `protobuf:"bytes,50,opt,name=Sha1Sum,proto3,oneof" json:"Sha1Sum,omitempty"`
	State     *FileRecordState `protobuf:"varint,60,opt,name=State,proto3,enum=bright.filerecord.FileRecordState,oneof" json:"State,omitempty"`
	Remark    *string          `protobuf:"bytes,70,opt,name=Remark,proto3,oneof" json:"Remark,omitempty"`
}

func (x *FileRecordReq) Reset() {
	*x = FileRecordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bright_filerecord_filerecord_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileRecordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRecordReq) ProtoMessage() {}

func (x *FileRecordReq) ProtoReflect() protoreflect.Message {
	mi := &file_bright_filerecord_filerecord_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRecordReq.ProtoReflect.Descriptor instead.
func (*FileRecordReq) Descriptor() ([]byte, []int) {
	return file_bright_filerecord_filerecord_proto_rawDescGZIP(), []int{0}
}

func (x *FileRecordReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *FileRecordReq) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *FileRecordReq) GetTopicID() string {
	if x != nil && x.TopicID != nil {
		return *x.TopicID
	}
	return ""
}

func (x *FileRecordReq) GetRecordNum() uint32 {
	if x != nil && x.RecordNum != nil {
		return *x.RecordNum
	}
	return 0
}

func (x *FileRecordReq) GetSha1Sum() string {
	if x != nil && x.Sha1Sum != nil {
		return *x.Sha1Sum
	}
	return ""
}

func (x *FileRecordReq) GetState() FileRecordState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return FileRecordState_FileRecordDefault
}

func (x *FileRecordReq) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type FileRecordInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string          `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	FileName  string          `protobuf:"bytes,20,opt,name=FileName,proto3" json:"FileName,omitempty"`
	TopicID   string          `protobuf:"bytes,30,opt,name=TopicID,proto3" json:"TopicID,omitempty"`
	RecordNum uint32          `protobuf:"varint,40,opt,name=RecordNum,proto3" json:"RecordNum,omitempty"`
	Sha1Sum   string          `protobuf:"bytes,50,opt,name=Sha1Sum,proto3" json:"Sha1Sum,omitempty"`
	State     FileRecordState `protobuf:"varint,60,opt,name=State,proto3,enum=bright.filerecord.FileRecordState" json:"State,omitempty"`
	Remark    string          `protobuf:"bytes,70,opt,name=Remark,proto3" json:"Remark,omitempty"`
	CreatedAt uint32          `protobuf:"varint,80,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt uint32          `protobuf:"varint,90,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *FileRecordInfo) Reset() {
	*x = FileRecordInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bright_filerecord_filerecord_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileRecordInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRecordInfo) ProtoMessage() {}

func (x *FileRecordInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bright_filerecord_filerecord_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRecordInfo.ProtoReflect.Descriptor instead.
func (*FileRecordInfo) Descriptor() ([]byte, []int) {
	return file_bright_filerecord_filerecord_proto_rawDescGZIP(), []int{1}
}

func (x *FileRecordInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *FileRecordInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileRecordInfo) GetTopicID() string {
	if x != nil {
		return x.TopicID
	}
	return ""
}

func (x *FileRecordInfo) GetRecordNum() uint32 {
	if x != nil {
		return x.RecordNum
	}
	return 0
}

func (x *FileRecordInfo) GetSha1Sum() string {
	if x != nil {
		return x.Sha1Sum
	}
	return ""
}

func (x *FileRecordInfo) GetState() FileRecordState {
	if x != nil {
		return x.State
	}
	return FileRecordState_FileRecordDefault
}

func (x *FileRecordInfo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *FileRecordInfo) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *FileRecordInfo) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type FileRecordConds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        *string          `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	FileName  *string          `protobuf:"bytes,20,opt,name=FileName,proto3,oneof" json:"FileName,omitempty"`
	TopicID   *string          `protobuf:"bytes,30,opt,name=TopicID,proto3,oneof" json:"TopicID,omitempty"`
	RecordNum *uint32          `protobuf:"varint,40,opt,name=RecordNum,proto3,oneof" json:"RecordNum,omitempty"`
	Sha1Sum   *string          `protobuf:"bytes,50,opt,name=Sha1Sum,proto3,oneof" json:"Sha1Sum,omitempty"`
	State     *FileRecordState `protobuf:"varint,60,opt,name=State,proto3,enum=bright.filerecord.FileRecordState,oneof" json:"State,omitempty"`
	Remark    *string          `protobuf:"bytes,70,opt,name=Remark,proto3,oneof" json:"Remark,omitempty"`
	IDs       []string         `protobuf:"bytes,100,rep,name=IDs,proto3" json:"IDs,omitempty"`
}

func (x *FileRecordConds) Reset() {
	*x = FileRecordConds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bright_filerecord_filerecord_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileRecordConds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRecordConds) ProtoMessage() {}

func (x *FileRecordConds) ProtoReflect() protoreflect.Message {
	mi := &file_bright_filerecord_filerecord_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRecordConds.ProtoReflect.Descriptor instead.
func (*FileRecordConds) Descriptor() ([]byte, []int) {
	return file_bright_filerecord_filerecord_proto_rawDescGZIP(), []int{2}
}

func (x *FileRecordConds) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *FileRecordConds) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *FileRecordConds) GetTopicID() string {
	if x != nil && x.TopicID != nil {
		return *x.TopicID
	}
	return ""
}

func (x *FileRecordConds) GetRecordNum() uint32 {
	if x != nil && x.RecordNum != nil {
		return *x.RecordNum
	}
	return 0
}

func (x *FileRecordConds) GetSha1Sum() string {
	if x != nil && x.Sha1Sum != nil {
		return *x.Sha1Sum
	}
	return ""
}

func (x *FileRecordConds) GetState() FileRecordState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return FileRecordState_FileRecordDefault
}

func (x *FileRecordConds) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

func (x *FileRecordConds) GetIDs() []string {
	if x != nil {
		return x.IDs
	}
	return nil
}

type CreateFileRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File    string `protobuf:"bytes,10,opt,name=File,proto3" json:"File,omitempty"`
	TopicID string `protobuf:"bytes,20,opt,name=TopicID,proto3" json:"TopicID,omitempty"`
	Type    string `protobuf:"bytes,30,opt,name=Type,proto3" json:"Type,omitempty"`
	Remark  string `protobuf:"bytes,40,opt,name=Remark,proto3" json:"Remark,omitempty"`
}

func (x *CreateFileRecordRequest) Reset() {
	*x = CreateFileRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bright_filerecord_filerecord_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFileRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileRecordRequest) ProtoMessage() {}

func (x *CreateFileRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bright_filerecord_filerecord_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileRecordRequest.ProtoReflect.Descriptor instead.
func (*CreateFileRecordRequest) Descriptor() ([]byte, []int) {
	return file_bright_filerecord_filerecord_proto_rawDescGZIP(), []int{3}
}

func (x *CreateFileRecordRequest) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *CreateFileRecordRequest) GetTopicID() string {
	if x != nil {
		return x.TopicID
	}
	return ""
}

func (x *CreateFileRecordRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateFileRecordRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type CreateFileRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FileRecordInfo `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateFileRecordResponse) Reset() {
	*x = CreateFileRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bright_filerecord_filerecord_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFileRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFileRecordResponse) ProtoMessage() {}

func (x *CreateFileRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bright_filerecord_filerecord_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFileRecordResponse.ProtoReflect.Descriptor instead.
func (*CreateFileRecordResponse) Descriptor() ([]byte, []int) {
	return file_bright_filerecord_filerecord_proto_rawDescGZIP(), []int{4}
}

func (x *CreateFileRecordResponse) GetInfo() *FileRecordInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetFileRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetFileRecordRequest) Reset() {
	*x = GetFileRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bright_filerecord_filerecord_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileRecordRequest) ProtoMessage() {}

func (x *GetFileRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bright_filerecord_filerecord_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileRecordRequest.ProtoReflect.Descriptor instead.
func (*GetFileRecordRequest) Descriptor() ([]byte, []int) {
	return file_bright_filerecord_filerecord_proto_rawDescGZIP(), []int{5}
}

func (x *GetFileRecordRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetFileRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FileRecordInfo `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetFileRecordResponse) Reset() {
	*x = GetFileRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bright_filerecord_filerecord_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileRecordResponse) ProtoMessage() {}

func (x *GetFileRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bright_filerecord_filerecord_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileRecordResponse.ProtoReflect.Descriptor instead.
func (*GetFileRecordResponse) Descriptor() ([]byte, []int) {
	return file_bright_filerecord_filerecord_proto_rawDescGZIP(), []int{6}
}

func (x *GetFileRecordResponse) GetInfo() *FileRecordInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetFileRecordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info   *FileRecordConds `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
	Offset int32            `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32            `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetFileRecordsRequest) Reset() {
	*x = GetFileRecordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bright_filerecord_filerecord_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileRecordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileRecordsRequest) ProtoMessage() {}

func (x *GetFileRecordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bright_filerecord_filerecord_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileRecordsRequest.ProtoReflect.Descriptor instead.
func (*GetFileRecordsRequest) Descriptor() ([]byte, []int) {
	return file_bright_filerecord_filerecord_proto_rawDescGZIP(), []int{7}
}

func (x *GetFileRecordsRequest) GetInfo() *FileRecordConds {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *GetFileRecordsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetFileRecordsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetFileRecordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*FileRecordInfo `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32            `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetFileRecordsResponse) Reset() {
	*x = GetFileRecordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bright_filerecord_filerecord_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFileRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFileRecordsResponse) ProtoMessage() {}

func (x *GetFileRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bright_filerecord_filerecord_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFileRecordsResponse.ProtoReflect.Descriptor instead.
func (*GetFileRecordsResponse) Descriptor() ([]byte, []int) {
	return file_bright_filerecord_filerecord_proto_rawDescGZIP(), []int{8}
}

func (x *GetFileRecordsResponse) GetInfos() []*FileRecordInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetFileRecordsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_bright_filerecord_filerecord_proto protoreflect.FileDescriptor

var file_bright_filerecord_filerecord_proto_rawDesc = []byte{
	0x0a, 0x22, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x13, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2f,
	0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x62, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd1, 0x02, 0x0a, 0x0d, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x44, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x75,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x31, 0x53, 0x75, 0x6d, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x53, 0x68, 0x61, 0x31, 0x53, 0x75, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x05, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x44, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x53, 0x68, 0x61, 0x31, 0x53, 0x75, 0x6d, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x9c,
	0x02, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4e, 0x75, 0x6d, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x68, 0x61, 0x31, 0x53, 0x75, 0x6d,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x68, 0x61, 0x31, 0x53, 0x75, 0x6d, 0x12,
	0x38, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe5, 0x02,
	0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x09, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x53, 0x68, 0x61,
	0x31, 0x53, 0x75, 0x6d, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x53, 0x68,
	0x61, 0x31, 0x53, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x05, 0x52, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x49, 0x44, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4e, 0x75, 0x6d, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x68, 0x61, 0x31, 0x53, 0x75, 0x6d,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x73, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x51, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x26, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x4e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x67, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x2a, 0x55, 0x0a,
	0x0f, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x15, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x0a, 0x12, 0x14,
	0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x10, 0x14, 0x32, 0x9b, 0x03, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x12, 0x8a, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x2e, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x7e, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x27,
	0x2e, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x67,
	0x65, 0x74, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x82, 0x01,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x28, 0x2e, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a,
	0x22, 0x10, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x73, 0x42, 0x2e, 0x5a, 0x2c, 0x79, 0x75, 0x6e, 0x2e, 0x74, 0x65, 0x61, 0x2f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x2f, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bright_filerecord_filerecord_proto_rawDescOnce sync.Once
	file_bright_filerecord_filerecord_proto_rawDescData = file_bright_filerecord_filerecord_proto_rawDesc
)

func file_bright_filerecord_filerecord_proto_rawDescGZIP() []byte {
	file_bright_filerecord_filerecord_proto_rawDescOnce.Do(func() {
		file_bright_filerecord_filerecord_proto_rawDescData = protoimpl.X.CompressGZIP(file_bright_filerecord_filerecord_proto_rawDescData)
	})
	return file_bright_filerecord_filerecord_proto_rawDescData
}

var file_bright_filerecord_filerecord_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_bright_filerecord_filerecord_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_bright_filerecord_filerecord_proto_goTypes = []interface{}{
	(FileRecordState)(0),             // 0: bright.filerecord.FileRecordState
	(*FileRecordReq)(nil),            // 1: bright.filerecord.FileRecordReq
	(*FileRecordInfo)(nil),           // 2: bright.filerecord.FileRecordInfo
	(*FileRecordConds)(nil),          // 3: bright.filerecord.FileRecordConds
	(*CreateFileRecordRequest)(nil),  // 4: bright.filerecord.CreateFileRecordRequest
	(*CreateFileRecordResponse)(nil), // 5: bright.filerecord.CreateFileRecordResponse
	(*GetFileRecordRequest)(nil),     // 6: bright.filerecord.GetFileRecordRequest
	(*GetFileRecordResponse)(nil),    // 7: bright.filerecord.GetFileRecordResponse
	(*GetFileRecordsRequest)(nil),    // 8: bright.filerecord.GetFileRecordsRequest
	(*GetFileRecordsResponse)(nil),   // 9: bright.filerecord.GetFileRecordsResponse
}
var file_bright_filerecord_filerecord_proto_depIdxs = []int32{
	0,  // 0: bright.filerecord.FileRecordReq.State:type_name -> bright.filerecord.FileRecordState
	0,  // 1: bright.filerecord.FileRecordInfo.State:type_name -> bright.filerecord.FileRecordState
	0,  // 2: bright.filerecord.FileRecordConds.State:type_name -> bright.filerecord.FileRecordState
	2,  // 3: bright.filerecord.CreateFileRecordResponse.Info:type_name -> bright.filerecord.FileRecordInfo
	2,  // 4: bright.filerecord.GetFileRecordResponse.Info:type_name -> bright.filerecord.FileRecordInfo
	3,  // 5: bright.filerecord.GetFileRecordsRequest.Info:type_name -> bright.filerecord.FileRecordConds
	2,  // 6: bright.filerecord.GetFileRecordsResponse.Infos:type_name -> bright.filerecord.FileRecordInfo
	4,  // 7: bright.filerecord.Manager.CreateFileRecord:input_type -> bright.filerecord.CreateFileRecordRequest
	6,  // 8: bright.filerecord.Manager.GetFileRecord:input_type -> bright.filerecord.GetFileRecordRequest
	8,  // 9: bright.filerecord.Manager.GetFileRecords:input_type -> bright.filerecord.GetFileRecordsRequest
	5,  // 10: bright.filerecord.Manager.CreateFileRecord:output_type -> bright.filerecord.CreateFileRecordResponse
	7,  // 11: bright.filerecord.Manager.GetFileRecord:output_type -> bright.filerecord.GetFileRecordResponse
	9,  // 12: bright.filerecord.Manager.GetFileRecords:output_type -> bright.filerecord.GetFileRecordsResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_bright_filerecord_filerecord_proto_init() }
func file_bright_filerecord_filerecord_proto_init() {
	if File_bright_filerecord_filerecord_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bright_filerecord_filerecord_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileRecordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bright_filerecord_filerecord_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileRecordInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bright_filerecord_filerecord_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileRecordConds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bright_filerecord_filerecord_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFileRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bright_filerecord_filerecord_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFileRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bright_filerecord_filerecord_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bright_filerecord_filerecord_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bright_filerecord_filerecord_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileRecordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bright_filerecord_filerecord_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFileRecordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bright_filerecord_filerecord_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_bright_filerecord_filerecord_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bright_filerecord_filerecord_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bright_filerecord_filerecord_proto_goTypes,
		DependencyIndexes: file_bright_filerecord_filerecord_proto_depIdxs,
		EnumInfos:         file_bright_filerecord_filerecord_proto_enumTypes,
		MessageInfos:      file_bright_filerecord_filerecord_proto_msgTypes,
	}.Build()
	File_bright_filerecord_filerecord_proto = out.File
	file_bright_filerecord_filerecord_proto_rawDesc = nil
	file_bright_filerecord_filerecord_proto_goTypes = nil
	file_bright_filerecord_filerecord_proto_depIdxs = nil
}
