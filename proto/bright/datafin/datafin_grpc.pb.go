// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: bright/datafin/datafin.proto

package datafin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateDataFin(ctx context.Context, in *CreateDataFinRequest, opts ...grpc.CallOption) (*CreateDataFinResponse, error)
	GetDataFins(ctx context.Context, in *GetDataFinsRequest, opts ...grpc.CallOption) (*GetDataFinsResponse, error)
	CheckIDDataFin(ctx context.Context, in *CheckIDDataFinRequest, opts ...grpc.CallOption) (*CheckIDDataFinResponse, error)
	CheckDataFin(ctx context.Context, in *CheckDataFinRequest, opts ...grpc.CallOption) (*CheckDataFinResponse, error)
	CheckIDDataFinWithData(ctx context.Context, in *CheckIDDataFinWithDataRequest, opts ...grpc.CallOption) (*CheckIDDataFinResponse, error)
	CheckDataFinWithData(ctx context.Context, in *CheckDataFinWithDataRequest, opts ...grpc.CallOption) (*CheckDataFinResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateDataFin(ctx context.Context, in *CreateDataFinRequest, opts ...grpc.CallOption) (*CreateDataFinResponse, error) {
	out := new(CreateDataFinResponse)
	err := c.cc.Invoke(ctx, "/bright.datafin.Manager/CreateDataFin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetDataFins(ctx context.Context, in *GetDataFinsRequest, opts ...grpc.CallOption) (*GetDataFinsResponse, error) {
	out := new(GetDataFinsResponse)
	err := c.cc.Invoke(ctx, "/bright.datafin.Manager/GetDataFins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CheckIDDataFin(ctx context.Context, in *CheckIDDataFinRequest, opts ...grpc.CallOption) (*CheckIDDataFinResponse, error) {
	out := new(CheckIDDataFinResponse)
	err := c.cc.Invoke(ctx, "/bright.datafin.Manager/CheckIDDataFin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CheckDataFin(ctx context.Context, in *CheckDataFinRequest, opts ...grpc.CallOption) (*CheckDataFinResponse, error) {
	out := new(CheckDataFinResponse)
	err := c.cc.Invoke(ctx, "/bright.datafin.Manager/CheckDataFin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CheckIDDataFinWithData(ctx context.Context, in *CheckIDDataFinWithDataRequest, opts ...grpc.CallOption) (*CheckIDDataFinResponse, error) {
	out := new(CheckIDDataFinResponse)
	err := c.cc.Invoke(ctx, "/bright.datafin.Manager/CheckIDDataFinWithData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CheckDataFinWithData(ctx context.Context, in *CheckDataFinWithDataRequest, opts ...grpc.CallOption) (*CheckDataFinResponse, error) {
	out := new(CheckDataFinResponse)
	err := c.cc.Invoke(ctx, "/bright.datafin.Manager/CheckDataFinWithData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateDataFin(context.Context, *CreateDataFinRequest) (*CreateDataFinResponse, error)
	GetDataFins(context.Context, *GetDataFinsRequest) (*GetDataFinsResponse, error)
	CheckIDDataFin(context.Context, *CheckIDDataFinRequest) (*CheckIDDataFinResponse, error)
	CheckDataFin(context.Context, *CheckDataFinRequest) (*CheckDataFinResponse, error)
	CheckIDDataFinWithData(context.Context, *CheckIDDataFinWithDataRequest) (*CheckIDDataFinResponse, error)
	CheckDataFinWithData(context.Context, *CheckDataFinWithDataRequest) (*CheckDataFinResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateDataFin(context.Context, *CreateDataFinRequest) (*CreateDataFinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDataFin not implemented")
}
func (UnimplementedManagerServer) GetDataFins(context.Context, *GetDataFinsRequest) (*GetDataFinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDataFins not implemented")
}
func (UnimplementedManagerServer) CheckIDDataFin(context.Context, *CheckIDDataFinRequest) (*CheckIDDataFinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIDDataFin not implemented")
}
func (UnimplementedManagerServer) CheckDataFin(context.Context, *CheckDataFinRequest) (*CheckDataFinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDataFin not implemented")
}
func (UnimplementedManagerServer) CheckIDDataFinWithData(context.Context, *CheckIDDataFinWithDataRequest) (*CheckIDDataFinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIDDataFinWithData not implemented")
}
func (UnimplementedManagerServer) CheckDataFinWithData(context.Context, *CheckDataFinWithDataRequest) (*CheckDataFinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDataFinWithData not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateDataFin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataFinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateDataFin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bright.datafin.Manager/CreateDataFin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateDataFin(ctx, req.(*CreateDataFinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetDataFins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataFinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetDataFins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bright.datafin.Manager/GetDataFins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetDataFins(ctx, req.(*GetDataFinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CheckIDDataFin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIDDataFinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CheckIDDataFin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bright.datafin.Manager/CheckIDDataFin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CheckIDDataFin(ctx, req.(*CheckIDDataFinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CheckDataFin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDataFinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CheckDataFin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bright.datafin.Manager/CheckDataFin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CheckDataFin(ctx, req.(*CheckDataFinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CheckIDDataFinWithData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIDDataFinWithDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CheckIDDataFinWithData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bright.datafin.Manager/CheckIDDataFinWithData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CheckIDDataFinWithData(ctx, req.(*CheckIDDataFinWithDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CheckDataFinWithData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDataFinWithDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CheckDataFinWithData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bright.datafin.Manager/CheckDataFinWithData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CheckDataFinWithData(ctx, req.(*CheckDataFinWithDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bright.datafin.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDataFin",
			Handler:    _Manager_CreateDataFin_Handler,
		},
		{
			MethodName: "GetDataFins",
			Handler:    _Manager_GetDataFins_Handler,
		},
		{
			MethodName: "CheckIDDataFin",
			Handler:    _Manager_CheckIDDataFin_Handler,
		},
		{
			MethodName: "CheckDataFin",
			Handler:    _Manager_CheckDataFin_Handler,
		},
		{
			MethodName: "CheckIDDataFinWithData",
			Handler:    _Manager_CheckIDDataFinWithData_Handler,
		},
		{
			MethodName: "CheckDataFinWithData",
			Handler:    _Manager_CheckDataFinWithData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bright/datafin/datafin.proto",
}
