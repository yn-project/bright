// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"yun.tea/block/bright/datafin/pkg/db/ent/filerecord"
)

// FileRecord is the model entity for the FileRecord schema.
type FileRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// PackageName holds the value of the "package_name" field.
	PackageName string `json:"package_name,omitempty"`
	// FileName holds the value of the "file_name" field.
	FileName string `json:"file_name,omitempty"`
	// TopicID holds the value of the "topic_id" field.
	TopicID string `json:"topic_id,omitempty"`
	// RecordNum holds the value of the "record_num" field.
	RecordNum uint32 `json:"record_num,omitempty"`
	// Sha1Sum holds the value of the "sha1_sum" field.
	Sha1Sum string `json:"sha1_sum,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FileRecord) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case filerecord.FieldCreatedAt, filerecord.FieldUpdatedAt, filerecord.FieldDeletedAt, filerecord.FieldRecordNum:
			values[i] = new(sql.NullInt64)
		case filerecord.FieldPackageName, filerecord.FieldFileName, filerecord.FieldTopicID, filerecord.FieldSha1Sum, filerecord.FieldState, filerecord.FieldRemark:
			values[i] = new(sql.NullString)
		case filerecord.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FileRecord", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FileRecord fields.
func (fr *FileRecord) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case filerecord.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				fr.ID = *value
			}
		case filerecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fr.CreatedAt = uint32(value.Int64)
			}
		case filerecord.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fr.UpdatedAt = uint32(value.Int64)
			}
		case filerecord.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				fr.DeletedAt = uint32(value.Int64)
			}
		case filerecord.FieldPackageName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field package_name", values[i])
			} else if value.Valid {
				fr.PackageName = value.String
			}
		case filerecord.FieldFileName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_name", values[i])
			} else if value.Valid {
				fr.FileName = value.String
			}
		case filerecord.FieldTopicID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topic_id", values[i])
			} else if value.Valid {
				fr.TopicID = value.String
			}
		case filerecord.FieldRecordNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field record_num", values[i])
			} else if value.Valid {
				fr.RecordNum = uint32(value.Int64)
			}
		case filerecord.FieldSha1Sum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sha1_sum", values[i])
			} else if value.Valid {
				fr.Sha1Sum = value.String
			}
		case filerecord.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				fr.State = value.String
			}
		case filerecord.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				fr.Remark = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this FileRecord.
// Note that you need to call FileRecord.Unwrap() before calling this method if this FileRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (fr *FileRecord) Update() *FileRecordUpdateOne {
	return (&FileRecordClient{config: fr.config}).UpdateOne(fr)
}

// Unwrap unwraps the FileRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fr *FileRecord) Unwrap() *FileRecord {
	_tx, ok := fr.config.driver.(*txDriver)
	if !ok {
		panic("ent: FileRecord is not a transactional entity")
	}
	fr.config.driver = _tx.drv
	return fr
}

// String implements the fmt.Stringer.
func (fr *FileRecord) String() string {
	var builder strings.Builder
	builder.WriteString("FileRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", fr.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", fr.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", fr.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("package_name=")
	builder.WriteString(fr.PackageName)
	builder.WriteString(", ")
	builder.WriteString("file_name=")
	builder.WriteString(fr.FileName)
	builder.WriteString(", ")
	builder.WriteString("topic_id=")
	builder.WriteString(fr.TopicID)
	builder.WriteString(", ")
	builder.WriteString("record_num=")
	builder.WriteString(fmt.Sprintf("%v", fr.RecordNum))
	builder.WriteString(", ")
	builder.WriteString("sha1_sum=")
	builder.WriteString(fr.Sha1Sum)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fr.State)
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(fr.Remark)
	builder.WriteByte(')')
	return builder.String()
}

// FileRecords is a parsable slice of FileRecord.
type FileRecords []*FileRecord

func (fr FileRecords) config(cfg config) {
	for _i := range fr {
		fr[_i].config = cfg
	}
}
