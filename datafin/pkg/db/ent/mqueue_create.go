// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"yun.tea/block/bright/datafin/pkg/db/ent/mqueue"
)

// MqueueCreate is the builder for creating a Mqueue entity.
type MqueueCreate struct {
	config
	mutation *MqueueMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (mc *MqueueCreate) SetCreatedAt(u uint32) *MqueueCreate {
	mc.mutation.SetCreatedAt(u)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MqueueCreate) SetNillableCreatedAt(u *uint32) *MqueueCreate {
	if u != nil {
		mc.SetCreatedAt(*u)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MqueueCreate) SetUpdatedAt(u uint32) *MqueueCreate {
	mc.mutation.SetUpdatedAt(u)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MqueueCreate) SetNillableUpdatedAt(u *uint32) *MqueueCreate {
	if u != nil {
		mc.SetUpdatedAt(*u)
	}
	return mc
}

// SetDeletedAt sets the "deleted_at" field.
func (mc *MqueueCreate) SetDeletedAt(u uint32) *MqueueCreate {
	mc.mutation.SetDeletedAt(u)
	return mc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mc *MqueueCreate) SetNillableDeletedAt(u *uint32) *MqueueCreate {
	if u != nil {
		mc.SetDeletedAt(*u)
	}
	return mc
}

// SetName sets the "name" field.
func (mc *MqueueCreate) SetName(s string) *MqueueCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetRemark sets the "remark" field.
func (mc *MqueueCreate) SetRemark(s string) *MqueueCreate {
	mc.mutation.SetRemark(s)
	return mc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (mc *MqueueCreate) SetNillableRemark(s *string) *MqueueCreate {
	if s != nil {
		mc.SetRemark(*s)
	}
	return mc
}

// SetTopicName sets the "topic_name" field.
func (mc *MqueueCreate) SetTopicName(s string) *MqueueCreate {
	mc.mutation.SetTopicName(s)
	return mc
}

// SetID sets the "id" field.
func (mc *MqueueCreate) SetID(u uuid.UUID) *MqueueCreate {
	mc.mutation.SetID(u)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *MqueueCreate) SetNillableID(u *uuid.UUID) *MqueueCreate {
	if u != nil {
		mc.SetID(*u)
	}
	return mc
}

// Mutation returns the MqueueMutation object of the builder.
func (mc *MqueueCreate) Mutation() *MqueueMutation {
	return mc.mutation
}

// Save creates the Mqueue in the database.
func (mc *MqueueCreate) Save(ctx context.Context) (*Mqueue, error) {
	var (
		err  error
		node *Mqueue
	)
	if err := mc.defaults(); err != nil {
		return nil, err
	}
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MqueueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			if node, err = mc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			if mc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, mc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Mqueue)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MqueueMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MqueueCreate) SaveX(ctx context.Context) *Mqueue {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MqueueCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MqueueCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MqueueCreate) defaults() error {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		if mqueue.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized mqueue.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := mqueue.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		if mqueue.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized mqueue.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := mqueue.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mc.mutation.DeletedAt(); !ok {
		if mqueue.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized mqueue.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := mqueue.DefaultDeletedAt()
		mc.mutation.SetDeletedAt(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		if mqueue.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized mqueue.DefaultID (forgotten import ent/runtime?)")
		}
		v := mqueue.DefaultID()
		mc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (mc *MqueueCreate) check() error {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Mqueue.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Mqueue.updated_at"`)}
	}
	if _, ok := mc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Mqueue.deleted_at"`)}
	}
	if _, ok := mc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Mqueue.name"`)}
	}
	if _, ok := mc.mutation.TopicName(); !ok {
		return &ValidationError{Name: "topic_name", err: errors.New(`ent: missing required field "Mqueue.topic_name"`)}
	}
	return nil
}

func (mc *MqueueCreate) sqlSave(ctx context.Context) (*Mqueue, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (mc *MqueueCreate) createSpec() (*Mqueue, *sqlgraph.CreateSpec) {
	var (
		_node = &Mqueue{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: mqueue.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: mqueue.FieldID,
			},
		}
	)
	_spec.OnConflict = mc.conflict
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: mqueue.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: mqueue.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := mc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: mqueue.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mqueue.FieldName,
		})
		_node.Name = value
	}
	if value, ok := mc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mqueue.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := mc.mutation.TopicName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mqueue.FieldTopicName,
		})
		_node.TopicName = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Mqueue.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MqueueUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (mc *MqueueCreate) OnConflict(opts ...sql.ConflictOption) *MqueueUpsertOne {
	mc.conflict = opts
	return &MqueueUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Mqueue.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MqueueCreate) OnConflictColumns(columns ...string) *MqueueUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MqueueUpsertOne{
		create: mc,
	}
}

type (
	// MqueueUpsertOne is the builder for "upsert"-ing
	//  one Mqueue node.
	MqueueUpsertOne struct {
		create *MqueueCreate
	}

	// MqueueUpsert is the "OnConflict" setter.
	MqueueUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *MqueueUpsert) SetCreatedAt(v uint32) *MqueueUpsert {
	u.Set(mqueue.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MqueueUpsert) UpdateCreatedAt() *MqueueUpsert {
	u.SetExcluded(mqueue.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *MqueueUpsert) AddCreatedAt(v uint32) *MqueueUpsert {
	u.Add(mqueue.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MqueueUpsert) SetUpdatedAt(v uint32) *MqueueUpsert {
	u.Set(mqueue.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MqueueUpsert) UpdateUpdatedAt() *MqueueUpsert {
	u.SetExcluded(mqueue.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *MqueueUpsert) AddUpdatedAt(v uint32) *MqueueUpsert {
	u.Add(mqueue.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MqueueUpsert) SetDeletedAt(v uint32) *MqueueUpsert {
	u.Set(mqueue.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MqueueUpsert) UpdateDeletedAt() *MqueueUpsert {
	u.SetExcluded(mqueue.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *MqueueUpsert) AddDeletedAt(v uint32) *MqueueUpsert {
	u.Add(mqueue.FieldDeletedAt, v)
	return u
}

// SetName sets the "name" field.
func (u *MqueueUpsert) SetName(v string) *MqueueUpsert {
	u.Set(mqueue.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MqueueUpsert) UpdateName() *MqueueUpsert {
	u.SetExcluded(mqueue.FieldName)
	return u
}

// SetRemark sets the "remark" field.
func (u *MqueueUpsert) SetRemark(v string) *MqueueUpsert {
	u.Set(mqueue.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *MqueueUpsert) UpdateRemark() *MqueueUpsert {
	u.SetExcluded(mqueue.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *MqueueUpsert) ClearRemark() *MqueueUpsert {
	u.SetNull(mqueue.FieldRemark)
	return u
}

// SetTopicName sets the "topic_name" field.
func (u *MqueueUpsert) SetTopicName(v string) *MqueueUpsert {
	u.Set(mqueue.FieldTopicName, v)
	return u
}

// UpdateTopicName sets the "topic_name" field to the value that was provided on create.
func (u *MqueueUpsert) UpdateTopicName() *MqueueUpsert {
	u.SetExcluded(mqueue.FieldTopicName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Mqueue.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mqueue.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MqueueUpsertOne) UpdateNewValues() *MqueueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(mqueue.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Mqueue.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MqueueUpsertOne) Ignore() *MqueueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MqueueUpsertOne) DoNothing() *MqueueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MqueueCreate.OnConflict
// documentation for more info.
func (u *MqueueUpsertOne) Update(set func(*MqueueUpsert)) *MqueueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MqueueUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *MqueueUpsertOne) SetCreatedAt(v uint32) *MqueueUpsertOne {
	return u.Update(func(s *MqueueUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *MqueueUpsertOne) AddCreatedAt(v uint32) *MqueueUpsertOne {
	return u.Update(func(s *MqueueUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MqueueUpsertOne) UpdateCreatedAt() *MqueueUpsertOne {
	return u.Update(func(s *MqueueUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MqueueUpsertOne) SetUpdatedAt(v uint32) *MqueueUpsertOne {
	return u.Update(func(s *MqueueUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *MqueueUpsertOne) AddUpdatedAt(v uint32) *MqueueUpsertOne {
	return u.Update(func(s *MqueueUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MqueueUpsertOne) UpdateUpdatedAt() *MqueueUpsertOne {
	return u.Update(func(s *MqueueUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MqueueUpsertOne) SetDeletedAt(v uint32) *MqueueUpsertOne {
	return u.Update(func(s *MqueueUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *MqueueUpsertOne) AddDeletedAt(v uint32) *MqueueUpsertOne {
	return u.Update(func(s *MqueueUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MqueueUpsertOne) UpdateDeletedAt() *MqueueUpsertOne {
	return u.Update(func(s *MqueueUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *MqueueUpsertOne) SetName(v string) *MqueueUpsertOne {
	return u.Update(func(s *MqueueUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MqueueUpsertOne) UpdateName() *MqueueUpsertOne {
	return u.Update(func(s *MqueueUpsert) {
		s.UpdateName()
	})
}

// SetRemark sets the "remark" field.
func (u *MqueueUpsertOne) SetRemark(v string) *MqueueUpsertOne {
	return u.Update(func(s *MqueueUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *MqueueUpsertOne) UpdateRemark() *MqueueUpsertOne {
	return u.Update(func(s *MqueueUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *MqueueUpsertOne) ClearRemark() *MqueueUpsertOne {
	return u.Update(func(s *MqueueUpsert) {
		s.ClearRemark()
	})
}

// SetTopicName sets the "topic_name" field.
func (u *MqueueUpsertOne) SetTopicName(v string) *MqueueUpsertOne {
	return u.Update(func(s *MqueueUpsert) {
		s.SetTopicName(v)
	})
}

// UpdateTopicName sets the "topic_name" field to the value that was provided on create.
func (u *MqueueUpsertOne) UpdateTopicName() *MqueueUpsertOne {
	return u.Update(func(s *MqueueUpsert) {
		s.UpdateTopicName()
	})
}

// Exec executes the query.
func (u *MqueueUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MqueueCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MqueueUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MqueueUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MqueueUpsertOne.ID is not supported by MySQL driver. Use MqueueUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MqueueUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MqueueCreateBulk is the builder for creating many Mqueue entities in bulk.
type MqueueCreateBulk struct {
	config
	builders []*MqueueCreate
	conflict []sql.ConflictOption
}

// Save creates the Mqueue entities in the database.
func (mcb *MqueueCreateBulk) Save(ctx context.Context) ([]*Mqueue, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Mqueue, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MqueueMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MqueueCreateBulk) SaveX(ctx context.Context) []*Mqueue {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MqueueCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MqueueCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Mqueue.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MqueueUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (mcb *MqueueCreateBulk) OnConflict(opts ...sql.ConflictOption) *MqueueUpsertBulk {
	mcb.conflict = opts
	return &MqueueUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Mqueue.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MqueueCreateBulk) OnConflictColumns(columns ...string) *MqueueUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MqueueUpsertBulk{
		create: mcb,
	}
}

// MqueueUpsertBulk is the builder for "upsert"-ing
// a bulk of Mqueue nodes.
type MqueueUpsertBulk struct {
	create *MqueueCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Mqueue.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(mqueue.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MqueueUpsertBulk) UpdateNewValues() *MqueueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(mqueue.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Mqueue.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MqueueUpsertBulk) Ignore() *MqueueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MqueueUpsertBulk) DoNothing() *MqueueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MqueueCreateBulk.OnConflict
// documentation for more info.
func (u *MqueueUpsertBulk) Update(set func(*MqueueUpsert)) *MqueueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MqueueUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *MqueueUpsertBulk) SetCreatedAt(v uint32) *MqueueUpsertBulk {
	return u.Update(func(s *MqueueUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *MqueueUpsertBulk) AddCreatedAt(v uint32) *MqueueUpsertBulk {
	return u.Update(func(s *MqueueUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MqueueUpsertBulk) UpdateCreatedAt() *MqueueUpsertBulk {
	return u.Update(func(s *MqueueUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *MqueueUpsertBulk) SetUpdatedAt(v uint32) *MqueueUpsertBulk {
	return u.Update(func(s *MqueueUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *MqueueUpsertBulk) AddUpdatedAt(v uint32) *MqueueUpsertBulk {
	return u.Update(func(s *MqueueUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *MqueueUpsertBulk) UpdateUpdatedAt() *MqueueUpsertBulk {
	return u.Update(func(s *MqueueUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *MqueueUpsertBulk) SetDeletedAt(v uint32) *MqueueUpsertBulk {
	return u.Update(func(s *MqueueUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *MqueueUpsertBulk) AddDeletedAt(v uint32) *MqueueUpsertBulk {
	return u.Update(func(s *MqueueUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *MqueueUpsertBulk) UpdateDeletedAt() *MqueueUpsertBulk {
	return u.Update(func(s *MqueueUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *MqueueUpsertBulk) SetName(v string) *MqueueUpsertBulk {
	return u.Update(func(s *MqueueUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MqueueUpsertBulk) UpdateName() *MqueueUpsertBulk {
	return u.Update(func(s *MqueueUpsert) {
		s.UpdateName()
	})
}

// SetRemark sets the "remark" field.
func (u *MqueueUpsertBulk) SetRemark(v string) *MqueueUpsertBulk {
	return u.Update(func(s *MqueueUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *MqueueUpsertBulk) UpdateRemark() *MqueueUpsertBulk {
	return u.Update(func(s *MqueueUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *MqueueUpsertBulk) ClearRemark() *MqueueUpsertBulk {
	return u.Update(func(s *MqueueUpsert) {
		s.ClearRemark()
	})
}

// SetTopicName sets the "topic_name" field.
func (u *MqueueUpsertBulk) SetTopicName(v string) *MqueueUpsertBulk {
	return u.Update(func(s *MqueueUpsert) {
		s.SetTopicName(v)
	})
}

// UpdateTopicName sets the "topic_name" field to the value that was provided on create.
func (u *MqueueUpsertBulk) UpdateTopicName() *MqueueUpsertBulk {
	return u.Update(func(s *MqueueUpsert) {
		s.UpdateTopicName()
	})
}

// Exec executes the query.
func (u *MqueueUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MqueueCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MqueueCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MqueueUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
