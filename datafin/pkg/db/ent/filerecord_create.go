// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"yun.tea/block/bright/datafin/pkg/db/ent/filerecord"
)

// FileRecordCreate is the builder for creating a FileRecord entity.
type FileRecordCreate struct {
	config
	mutation *FileRecordMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (frc *FileRecordCreate) SetCreatedAt(u uint32) *FileRecordCreate {
	frc.mutation.SetCreatedAt(u)
	return frc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (frc *FileRecordCreate) SetNillableCreatedAt(u *uint32) *FileRecordCreate {
	if u != nil {
		frc.SetCreatedAt(*u)
	}
	return frc
}

// SetUpdatedAt sets the "updated_at" field.
func (frc *FileRecordCreate) SetUpdatedAt(u uint32) *FileRecordCreate {
	frc.mutation.SetUpdatedAt(u)
	return frc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (frc *FileRecordCreate) SetNillableUpdatedAt(u *uint32) *FileRecordCreate {
	if u != nil {
		frc.SetUpdatedAt(*u)
	}
	return frc
}

// SetDeletedAt sets the "deleted_at" field.
func (frc *FileRecordCreate) SetDeletedAt(u uint32) *FileRecordCreate {
	frc.mutation.SetDeletedAt(u)
	return frc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (frc *FileRecordCreate) SetNillableDeletedAt(u *uint32) *FileRecordCreate {
	if u != nil {
		frc.SetDeletedAt(*u)
	}
	return frc
}

// SetPackageName sets the "package_name" field.
func (frc *FileRecordCreate) SetPackageName(s string) *FileRecordCreate {
	frc.mutation.SetPackageName(s)
	return frc
}

// SetFileName sets the "file_name" field.
func (frc *FileRecordCreate) SetFileName(s string) *FileRecordCreate {
	frc.mutation.SetFileName(s)
	return frc
}

// SetTopicID sets the "topic_id" field.
func (frc *FileRecordCreate) SetTopicID(s string) *FileRecordCreate {
	frc.mutation.SetTopicID(s)
	return frc
}

// SetRecordNum sets the "record_num" field.
func (frc *FileRecordCreate) SetRecordNum(u uint32) *FileRecordCreate {
	frc.mutation.SetRecordNum(u)
	return frc
}

// SetNillableRecordNum sets the "record_num" field if the given value is not nil.
func (frc *FileRecordCreate) SetNillableRecordNum(u *uint32) *FileRecordCreate {
	if u != nil {
		frc.SetRecordNum(*u)
	}
	return frc
}

// SetSha1Sum sets the "sha1_sum" field.
func (frc *FileRecordCreate) SetSha1Sum(s string) *FileRecordCreate {
	frc.mutation.SetSha1Sum(s)
	return frc
}

// SetState sets the "state" field.
func (frc *FileRecordCreate) SetState(s string) *FileRecordCreate {
	frc.mutation.SetState(s)
	return frc
}

// SetRemark sets the "remark" field.
func (frc *FileRecordCreate) SetRemark(s string) *FileRecordCreate {
	frc.mutation.SetRemark(s)
	return frc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (frc *FileRecordCreate) SetNillableRemark(s *string) *FileRecordCreate {
	if s != nil {
		frc.SetRemark(*s)
	}
	return frc
}

// SetID sets the "id" field.
func (frc *FileRecordCreate) SetID(u uuid.UUID) *FileRecordCreate {
	frc.mutation.SetID(u)
	return frc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (frc *FileRecordCreate) SetNillableID(u *uuid.UUID) *FileRecordCreate {
	if u != nil {
		frc.SetID(*u)
	}
	return frc
}

// Mutation returns the FileRecordMutation object of the builder.
func (frc *FileRecordCreate) Mutation() *FileRecordMutation {
	return frc.mutation
}

// Save creates the FileRecord in the database.
func (frc *FileRecordCreate) Save(ctx context.Context) (*FileRecord, error) {
	var (
		err  error
		node *FileRecord
	)
	if err := frc.defaults(); err != nil {
		return nil, err
	}
	if len(frc.hooks) == 0 {
		if err = frc.check(); err != nil {
			return nil, err
		}
		node, err = frc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FileRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = frc.check(); err != nil {
				return nil, err
			}
			frc.mutation = mutation
			if node, err = frc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(frc.hooks) - 1; i >= 0; i-- {
			if frc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = frc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, frc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FileRecord)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FileRecordMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (frc *FileRecordCreate) SaveX(ctx context.Context) *FileRecord {
	v, err := frc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (frc *FileRecordCreate) Exec(ctx context.Context) error {
	_, err := frc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (frc *FileRecordCreate) ExecX(ctx context.Context) {
	if err := frc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (frc *FileRecordCreate) defaults() error {
	if _, ok := frc.mutation.CreatedAt(); !ok {
		if filerecord.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized filerecord.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := filerecord.DefaultCreatedAt()
		frc.mutation.SetCreatedAt(v)
	}
	if _, ok := frc.mutation.UpdatedAt(); !ok {
		if filerecord.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized filerecord.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := filerecord.DefaultUpdatedAt()
		frc.mutation.SetUpdatedAt(v)
	}
	if _, ok := frc.mutation.DeletedAt(); !ok {
		if filerecord.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized filerecord.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := filerecord.DefaultDeletedAt()
		frc.mutation.SetDeletedAt(v)
	}
	if _, ok := frc.mutation.RecordNum(); !ok {
		v := filerecord.DefaultRecordNum
		frc.mutation.SetRecordNum(v)
	}
	if _, ok := frc.mutation.ID(); !ok {
		if filerecord.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized filerecord.DefaultID (forgotten import ent/runtime?)")
		}
		v := filerecord.DefaultID()
		frc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (frc *FileRecordCreate) check() error {
	if _, ok := frc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FileRecord.created_at"`)}
	}
	if _, ok := frc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FileRecord.updated_at"`)}
	}
	if _, ok := frc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "FileRecord.deleted_at"`)}
	}
	if _, ok := frc.mutation.PackageName(); !ok {
		return &ValidationError{Name: "package_name", err: errors.New(`ent: missing required field "FileRecord.package_name"`)}
	}
	if _, ok := frc.mutation.FileName(); !ok {
		return &ValidationError{Name: "file_name", err: errors.New(`ent: missing required field "FileRecord.file_name"`)}
	}
	if _, ok := frc.mutation.TopicID(); !ok {
		return &ValidationError{Name: "topic_id", err: errors.New(`ent: missing required field "FileRecord.topic_id"`)}
	}
	if _, ok := frc.mutation.RecordNum(); !ok {
		return &ValidationError{Name: "record_num", err: errors.New(`ent: missing required field "FileRecord.record_num"`)}
	}
	if _, ok := frc.mutation.Sha1Sum(); !ok {
		return &ValidationError{Name: "sha1_sum", err: errors.New(`ent: missing required field "FileRecord.sha1_sum"`)}
	}
	if _, ok := frc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "FileRecord.state"`)}
	}
	return nil
}

func (frc *FileRecordCreate) sqlSave(ctx context.Context) (*FileRecord, error) {
	_node, _spec := frc.createSpec()
	if err := sqlgraph.CreateNode(ctx, frc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (frc *FileRecordCreate) createSpec() (*FileRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &FileRecord{config: frc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: filerecord.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: filerecord.FieldID,
			},
		}
	)
	_spec.OnConflict = frc.conflict
	if id, ok := frc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := frc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: filerecord.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := frc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: filerecord.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := frc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: filerecord.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := frc.mutation.PackageName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filerecord.FieldPackageName,
		})
		_node.PackageName = value
	}
	if value, ok := frc.mutation.FileName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filerecord.FieldFileName,
		})
		_node.FileName = value
	}
	if value, ok := frc.mutation.TopicID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filerecord.FieldTopicID,
		})
		_node.TopicID = value
	}
	if value, ok := frc.mutation.RecordNum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: filerecord.FieldRecordNum,
		})
		_node.RecordNum = value
	}
	if value, ok := frc.mutation.Sha1Sum(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filerecord.FieldSha1Sum,
		})
		_node.Sha1Sum = value
	}
	if value, ok := frc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filerecord.FieldState,
		})
		_node.State = value
	}
	if value, ok := frc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: filerecord.FieldRemark,
		})
		_node.Remark = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FileRecord.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FileRecordUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (frc *FileRecordCreate) OnConflict(opts ...sql.ConflictOption) *FileRecordUpsertOne {
	frc.conflict = opts
	return &FileRecordUpsertOne{
		create: frc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FileRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (frc *FileRecordCreate) OnConflictColumns(columns ...string) *FileRecordUpsertOne {
	frc.conflict = append(frc.conflict, sql.ConflictColumns(columns...))
	return &FileRecordUpsertOne{
		create: frc,
	}
}

type (
	// FileRecordUpsertOne is the builder for "upsert"-ing
	//  one FileRecord node.
	FileRecordUpsertOne struct {
		create *FileRecordCreate
	}

	// FileRecordUpsert is the "OnConflict" setter.
	FileRecordUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *FileRecordUpsert) SetCreatedAt(v uint32) *FileRecordUpsert {
	u.Set(filerecord.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FileRecordUpsert) UpdateCreatedAt() *FileRecordUpsert {
	u.SetExcluded(filerecord.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FileRecordUpsert) AddCreatedAt(v uint32) *FileRecordUpsert {
	u.Add(filerecord.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FileRecordUpsert) SetUpdatedAt(v uint32) *FileRecordUpsert {
	u.Set(filerecord.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FileRecordUpsert) UpdateUpdatedAt() *FileRecordUpsert {
	u.SetExcluded(filerecord.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FileRecordUpsert) AddUpdatedAt(v uint32) *FileRecordUpsert {
	u.Add(filerecord.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FileRecordUpsert) SetDeletedAt(v uint32) *FileRecordUpsert {
	u.Set(filerecord.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FileRecordUpsert) UpdateDeletedAt() *FileRecordUpsert {
	u.SetExcluded(filerecord.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FileRecordUpsert) AddDeletedAt(v uint32) *FileRecordUpsert {
	u.Add(filerecord.FieldDeletedAt, v)
	return u
}

// SetPackageName sets the "package_name" field.
func (u *FileRecordUpsert) SetPackageName(v string) *FileRecordUpsert {
	u.Set(filerecord.FieldPackageName, v)
	return u
}

// UpdatePackageName sets the "package_name" field to the value that was provided on create.
func (u *FileRecordUpsert) UpdatePackageName() *FileRecordUpsert {
	u.SetExcluded(filerecord.FieldPackageName)
	return u
}

// SetFileName sets the "file_name" field.
func (u *FileRecordUpsert) SetFileName(v string) *FileRecordUpsert {
	u.Set(filerecord.FieldFileName, v)
	return u
}

// UpdateFileName sets the "file_name" field to the value that was provided on create.
func (u *FileRecordUpsert) UpdateFileName() *FileRecordUpsert {
	u.SetExcluded(filerecord.FieldFileName)
	return u
}

// SetTopicID sets the "topic_id" field.
func (u *FileRecordUpsert) SetTopicID(v string) *FileRecordUpsert {
	u.Set(filerecord.FieldTopicID, v)
	return u
}

// UpdateTopicID sets the "topic_id" field to the value that was provided on create.
func (u *FileRecordUpsert) UpdateTopicID() *FileRecordUpsert {
	u.SetExcluded(filerecord.FieldTopicID)
	return u
}

// SetRecordNum sets the "record_num" field.
func (u *FileRecordUpsert) SetRecordNum(v uint32) *FileRecordUpsert {
	u.Set(filerecord.FieldRecordNum, v)
	return u
}

// UpdateRecordNum sets the "record_num" field to the value that was provided on create.
func (u *FileRecordUpsert) UpdateRecordNum() *FileRecordUpsert {
	u.SetExcluded(filerecord.FieldRecordNum)
	return u
}

// AddRecordNum adds v to the "record_num" field.
func (u *FileRecordUpsert) AddRecordNum(v uint32) *FileRecordUpsert {
	u.Add(filerecord.FieldRecordNum, v)
	return u
}

// SetSha1Sum sets the "sha1_sum" field.
func (u *FileRecordUpsert) SetSha1Sum(v string) *FileRecordUpsert {
	u.Set(filerecord.FieldSha1Sum, v)
	return u
}

// UpdateSha1Sum sets the "sha1_sum" field to the value that was provided on create.
func (u *FileRecordUpsert) UpdateSha1Sum() *FileRecordUpsert {
	u.SetExcluded(filerecord.FieldSha1Sum)
	return u
}

// SetState sets the "state" field.
func (u *FileRecordUpsert) SetState(v string) *FileRecordUpsert {
	u.Set(filerecord.FieldState, v)
	return u
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *FileRecordUpsert) UpdateState() *FileRecordUpsert {
	u.SetExcluded(filerecord.FieldState)
	return u
}

// SetRemark sets the "remark" field.
func (u *FileRecordUpsert) SetRemark(v string) *FileRecordUpsert {
	u.Set(filerecord.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *FileRecordUpsert) UpdateRemark() *FileRecordUpsert {
	u.SetExcluded(filerecord.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *FileRecordUpsert) ClearRemark() *FileRecordUpsert {
	u.SetNull(filerecord.FieldRemark)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.FileRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(filerecord.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FileRecordUpsertOne) UpdateNewValues() *FileRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(filerecord.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FileRecord.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FileRecordUpsertOne) Ignore() *FileRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FileRecordUpsertOne) DoNothing() *FileRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FileRecordCreate.OnConflict
// documentation for more info.
func (u *FileRecordUpsertOne) Update(set func(*FileRecordUpsert)) *FileRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FileRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FileRecordUpsertOne) SetCreatedAt(v uint32) *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FileRecordUpsertOne) AddCreatedAt(v uint32) *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FileRecordUpsertOne) UpdateCreatedAt() *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FileRecordUpsertOne) SetUpdatedAt(v uint32) *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FileRecordUpsertOne) AddUpdatedAt(v uint32) *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FileRecordUpsertOne) UpdateUpdatedAt() *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FileRecordUpsertOne) SetDeletedAt(v uint32) *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FileRecordUpsertOne) AddDeletedAt(v uint32) *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FileRecordUpsertOne) UpdateDeletedAt() *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetPackageName sets the "package_name" field.
func (u *FileRecordUpsertOne) SetPackageName(v string) *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.SetPackageName(v)
	})
}

// UpdatePackageName sets the "package_name" field to the value that was provided on create.
func (u *FileRecordUpsertOne) UpdatePackageName() *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.UpdatePackageName()
	})
}

// SetFileName sets the "file_name" field.
func (u *FileRecordUpsertOne) SetFileName(v string) *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.SetFileName(v)
	})
}

// UpdateFileName sets the "file_name" field to the value that was provided on create.
func (u *FileRecordUpsertOne) UpdateFileName() *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.UpdateFileName()
	})
}

// SetTopicID sets the "topic_id" field.
func (u *FileRecordUpsertOne) SetTopicID(v string) *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.SetTopicID(v)
	})
}

// UpdateTopicID sets the "topic_id" field to the value that was provided on create.
func (u *FileRecordUpsertOne) UpdateTopicID() *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.UpdateTopicID()
	})
}

// SetRecordNum sets the "record_num" field.
func (u *FileRecordUpsertOne) SetRecordNum(v uint32) *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.SetRecordNum(v)
	})
}

// AddRecordNum adds v to the "record_num" field.
func (u *FileRecordUpsertOne) AddRecordNum(v uint32) *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.AddRecordNum(v)
	})
}

// UpdateRecordNum sets the "record_num" field to the value that was provided on create.
func (u *FileRecordUpsertOne) UpdateRecordNum() *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.UpdateRecordNum()
	})
}

// SetSha1Sum sets the "sha1_sum" field.
func (u *FileRecordUpsertOne) SetSha1Sum(v string) *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.SetSha1Sum(v)
	})
}

// UpdateSha1Sum sets the "sha1_sum" field to the value that was provided on create.
func (u *FileRecordUpsertOne) UpdateSha1Sum() *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.UpdateSha1Sum()
	})
}

// SetState sets the "state" field.
func (u *FileRecordUpsertOne) SetState(v string) *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *FileRecordUpsertOne) UpdateState() *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.UpdateState()
	})
}

// SetRemark sets the "remark" field.
func (u *FileRecordUpsertOne) SetRemark(v string) *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *FileRecordUpsertOne) UpdateRemark() *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *FileRecordUpsertOne) ClearRemark() *FileRecordUpsertOne {
	return u.Update(func(s *FileRecordUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *FileRecordUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FileRecordCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FileRecordUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FileRecordUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: FileRecordUpsertOne.ID is not supported by MySQL driver. Use FileRecordUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FileRecordUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FileRecordCreateBulk is the builder for creating many FileRecord entities in bulk.
type FileRecordCreateBulk struct {
	config
	builders []*FileRecordCreate
	conflict []sql.ConflictOption
}

// Save creates the FileRecord entities in the database.
func (frcb *FileRecordCreateBulk) Save(ctx context.Context) ([]*FileRecord, error) {
	specs := make([]*sqlgraph.CreateSpec, len(frcb.builders))
	nodes := make([]*FileRecord, len(frcb.builders))
	mutators := make([]Mutator, len(frcb.builders))
	for i := range frcb.builders {
		func(i int, root context.Context) {
			builder := frcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, frcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = frcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, frcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, frcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (frcb *FileRecordCreateBulk) SaveX(ctx context.Context) []*FileRecord {
	v, err := frcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (frcb *FileRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := frcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (frcb *FileRecordCreateBulk) ExecX(ctx context.Context) {
	if err := frcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FileRecord.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FileRecordUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (frcb *FileRecordCreateBulk) OnConflict(opts ...sql.ConflictOption) *FileRecordUpsertBulk {
	frcb.conflict = opts
	return &FileRecordUpsertBulk{
		create: frcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FileRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (frcb *FileRecordCreateBulk) OnConflictColumns(columns ...string) *FileRecordUpsertBulk {
	frcb.conflict = append(frcb.conflict, sql.ConflictColumns(columns...))
	return &FileRecordUpsertBulk{
		create: frcb,
	}
}

// FileRecordUpsertBulk is the builder for "upsert"-ing
// a bulk of FileRecord nodes.
type FileRecordUpsertBulk struct {
	create *FileRecordCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FileRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(filerecord.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FileRecordUpsertBulk) UpdateNewValues() *FileRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(filerecord.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FileRecord.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FileRecordUpsertBulk) Ignore() *FileRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FileRecordUpsertBulk) DoNothing() *FileRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FileRecordCreateBulk.OnConflict
// documentation for more info.
func (u *FileRecordUpsertBulk) Update(set func(*FileRecordUpsert)) *FileRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FileRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FileRecordUpsertBulk) SetCreatedAt(v uint32) *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FileRecordUpsertBulk) AddCreatedAt(v uint32) *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FileRecordUpsertBulk) UpdateCreatedAt() *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FileRecordUpsertBulk) SetUpdatedAt(v uint32) *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FileRecordUpsertBulk) AddUpdatedAt(v uint32) *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FileRecordUpsertBulk) UpdateUpdatedAt() *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FileRecordUpsertBulk) SetDeletedAt(v uint32) *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FileRecordUpsertBulk) AddDeletedAt(v uint32) *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FileRecordUpsertBulk) UpdateDeletedAt() *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetPackageName sets the "package_name" field.
func (u *FileRecordUpsertBulk) SetPackageName(v string) *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.SetPackageName(v)
	})
}

// UpdatePackageName sets the "package_name" field to the value that was provided on create.
func (u *FileRecordUpsertBulk) UpdatePackageName() *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.UpdatePackageName()
	})
}

// SetFileName sets the "file_name" field.
func (u *FileRecordUpsertBulk) SetFileName(v string) *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.SetFileName(v)
	})
}

// UpdateFileName sets the "file_name" field to the value that was provided on create.
func (u *FileRecordUpsertBulk) UpdateFileName() *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.UpdateFileName()
	})
}

// SetTopicID sets the "topic_id" field.
func (u *FileRecordUpsertBulk) SetTopicID(v string) *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.SetTopicID(v)
	})
}

// UpdateTopicID sets the "topic_id" field to the value that was provided on create.
func (u *FileRecordUpsertBulk) UpdateTopicID() *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.UpdateTopicID()
	})
}

// SetRecordNum sets the "record_num" field.
func (u *FileRecordUpsertBulk) SetRecordNum(v uint32) *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.SetRecordNum(v)
	})
}

// AddRecordNum adds v to the "record_num" field.
func (u *FileRecordUpsertBulk) AddRecordNum(v uint32) *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.AddRecordNum(v)
	})
}

// UpdateRecordNum sets the "record_num" field to the value that was provided on create.
func (u *FileRecordUpsertBulk) UpdateRecordNum() *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.UpdateRecordNum()
	})
}

// SetSha1Sum sets the "sha1_sum" field.
func (u *FileRecordUpsertBulk) SetSha1Sum(v string) *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.SetSha1Sum(v)
	})
}

// UpdateSha1Sum sets the "sha1_sum" field to the value that was provided on create.
func (u *FileRecordUpsertBulk) UpdateSha1Sum() *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.UpdateSha1Sum()
	})
}

// SetState sets the "state" field.
func (u *FileRecordUpsertBulk) SetState(v string) *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.SetState(v)
	})
}

// UpdateState sets the "state" field to the value that was provided on create.
func (u *FileRecordUpsertBulk) UpdateState() *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.UpdateState()
	})
}

// SetRemark sets the "remark" field.
func (u *FileRecordUpsertBulk) SetRemark(v string) *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *FileRecordUpsertBulk) UpdateRemark() *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *FileRecordUpsertBulk) ClearRemark() *FileRecordUpsertBulk {
	return u.Update(func(s *FileRecordUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *FileRecordUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FileRecordCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FileRecordCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FileRecordUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
