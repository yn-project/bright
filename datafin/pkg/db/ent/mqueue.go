// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"yun.tea/block/bright/datafin/pkg/db/ent/mqueue"
)

// Mqueue is the model entity for the Mqueue schema.
type Mqueue struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark,omitempty"`
	// TopicName holds the value of the "topic_name" field.
	TopicName string `json:"topic_name,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Mqueue) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case mqueue.FieldCreatedAt, mqueue.FieldUpdatedAt, mqueue.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case mqueue.FieldName, mqueue.FieldRemark, mqueue.FieldTopicName:
			values[i] = new(sql.NullString)
		case mqueue.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Mqueue", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Mqueue fields.
func (m *Mqueue) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mqueue.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case mqueue.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = uint32(value.Int64)
			}
		case mqueue.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = uint32(value.Int64)
			}
		case mqueue.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				m.DeletedAt = uint32(value.Int64)
			}
		case mqueue.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case mqueue.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				m.Remark = value.String
			}
		case mqueue.FieldTopicName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topic_name", values[i])
			} else if value.Valid {
				m.TopicName = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Mqueue.
// Note that you need to call Mqueue.Unwrap() before calling this method if this Mqueue
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Mqueue) Update() *MqueueUpdateOne {
	return (&MqueueClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Mqueue entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Mqueue) Unwrap() *Mqueue {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Mqueue is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Mqueue) String() string {
	var builder strings.Builder
	builder.WriteString("Mqueue(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", m.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", m.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", m.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(m.Name)
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(m.Remark)
	builder.WriteString(", ")
	builder.WriteString("topic_name=")
	builder.WriteString(m.TopicName)
	builder.WriteByte(')')
	return builder.String()
}

// Mqueues is a parsable slice of Mqueue.
type Mqueues []*Mqueue

func (m Mqueues) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
