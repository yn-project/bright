// Code generated by ent, DO NOT EDIT.

package filerecord

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"yun.tea/block/bright/datafin/pkg/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// FileName applies equality check predicate on the "file_name" field. It's identical to FileNameEQ.
func FileName(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileName), v))
	})
}

// TopicID applies equality check predicate on the "topic_id" field. It's identical to TopicIDEQ.
func TopicID(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTopicID), v))
	})
}

// RecordNum applies equality check predicate on the "record_num" field. It's identical to RecordNumEQ.
func RecordNum(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecordNum), v))
	})
}

// Sha1Sum applies equality check predicate on the "sha1_sum" field. It's identical to Sha1SumEQ.
func Sha1Sum(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSha1Sum), v))
	})
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.FileRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.FileRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.FileRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.FileRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.FileRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.FileRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// FileNameEQ applies the EQ predicate on the "file_name" field.
func FileNameEQ(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFileName), v))
	})
}

// FileNameNEQ applies the NEQ predicate on the "file_name" field.
func FileNameNEQ(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFileName), v))
	})
}

// FileNameIn applies the In predicate on the "file_name" field.
func FileNameIn(vs ...string) predicate.FileRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFileName), v...))
	})
}

// FileNameNotIn applies the NotIn predicate on the "file_name" field.
func FileNameNotIn(vs ...string) predicate.FileRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFileName), v...))
	})
}

// FileNameGT applies the GT predicate on the "file_name" field.
func FileNameGT(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFileName), v))
	})
}

// FileNameGTE applies the GTE predicate on the "file_name" field.
func FileNameGTE(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFileName), v))
	})
}

// FileNameLT applies the LT predicate on the "file_name" field.
func FileNameLT(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFileName), v))
	})
}

// FileNameLTE applies the LTE predicate on the "file_name" field.
func FileNameLTE(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFileName), v))
	})
}

// FileNameContains applies the Contains predicate on the "file_name" field.
func FileNameContains(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFileName), v))
	})
}

// FileNameHasPrefix applies the HasPrefix predicate on the "file_name" field.
func FileNameHasPrefix(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFileName), v))
	})
}

// FileNameHasSuffix applies the HasSuffix predicate on the "file_name" field.
func FileNameHasSuffix(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFileName), v))
	})
}

// FileNameEqualFold applies the EqualFold predicate on the "file_name" field.
func FileNameEqualFold(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFileName), v))
	})
}

// FileNameContainsFold applies the ContainsFold predicate on the "file_name" field.
func FileNameContainsFold(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFileName), v))
	})
}

// TopicIDEQ applies the EQ predicate on the "topic_id" field.
func TopicIDEQ(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTopicID), v))
	})
}

// TopicIDNEQ applies the NEQ predicate on the "topic_id" field.
func TopicIDNEQ(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTopicID), v))
	})
}

// TopicIDIn applies the In predicate on the "topic_id" field.
func TopicIDIn(vs ...string) predicate.FileRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTopicID), v...))
	})
}

// TopicIDNotIn applies the NotIn predicate on the "topic_id" field.
func TopicIDNotIn(vs ...string) predicate.FileRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTopicID), v...))
	})
}

// TopicIDGT applies the GT predicate on the "topic_id" field.
func TopicIDGT(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTopicID), v))
	})
}

// TopicIDGTE applies the GTE predicate on the "topic_id" field.
func TopicIDGTE(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTopicID), v))
	})
}

// TopicIDLT applies the LT predicate on the "topic_id" field.
func TopicIDLT(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTopicID), v))
	})
}

// TopicIDLTE applies the LTE predicate on the "topic_id" field.
func TopicIDLTE(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTopicID), v))
	})
}

// TopicIDContains applies the Contains predicate on the "topic_id" field.
func TopicIDContains(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTopicID), v))
	})
}

// TopicIDHasPrefix applies the HasPrefix predicate on the "topic_id" field.
func TopicIDHasPrefix(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTopicID), v))
	})
}

// TopicIDHasSuffix applies the HasSuffix predicate on the "topic_id" field.
func TopicIDHasSuffix(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTopicID), v))
	})
}

// TopicIDEqualFold applies the EqualFold predicate on the "topic_id" field.
func TopicIDEqualFold(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTopicID), v))
	})
}

// TopicIDContainsFold applies the ContainsFold predicate on the "topic_id" field.
func TopicIDContainsFold(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTopicID), v))
	})
}

// RecordNumEQ applies the EQ predicate on the "record_num" field.
func RecordNumEQ(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecordNum), v))
	})
}

// RecordNumNEQ applies the NEQ predicate on the "record_num" field.
func RecordNumNEQ(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecordNum), v))
	})
}

// RecordNumIn applies the In predicate on the "record_num" field.
func RecordNumIn(vs ...uint32) predicate.FileRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRecordNum), v...))
	})
}

// RecordNumNotIn applies the NotIn predicate on the "record_num" field.
func RecordNumNotIn(vs ...uint32) predicate.FileRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRecordNum), v...))
	})
}

// RecordNumGT applies the GT predicate on the "record_num" field.
func RecordNumGT(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRecordNum), v))
	})
}

// RecordNumGTE applies the GTE predicate on the "record_num" field.
func RecordNumGTE(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRecordNum), v))
	})
}

// RecordNumLT applies the LT predicate on the "record_num" field.
func RecordNumLT(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRecordNum), v))
	})
}

// RecordNumLTE applies the LTE predicate on the "record_num" field.
func RecordNumLTE(v uint32) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRecordNum), v))
	})
}

// Sha1SumEQ applies the EQ predicate on the "sha1_sum" field.
func Sha1SumEQ(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSha1Sum), v))
	})
}

// Sha1SumNEQ applies the NEQ predicate on the "sha1_sum" field.
func Sha1SumNEQ(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSha1Sum), v))
	})
}

// Sha1SumIn applies the In predicate on the "sha1_sum" field.
func Sha1SumIn(vs ...string) predicate.FileRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSha1Sum), v...))
	})
}

// Sha1SumNotIn applies the NotIn predicate on the "sha1_sum" field.
func Sha1SumNotIn(vs ...string) predicate.FileRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSha1Sum), v...))
	})
}

// Sha1SumGT applies the GT predicate on the "sha1_sum" field.
func Sha1SumGT(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSha1Sum), v))
	})
}

// Sha1SumGTE applies the GTE predicate on the "sha1_sum" field.
func Sha1SumGTE(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSha1Sum), v))
	})
}

// Sha1SumLT applies the LT predicate on the "sha1_sum" field.
func Sha1SumLT(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSha1Sum), v))
	})
}

// Sha1SumLTE applies the LTE predicate on the "sha1_sum" field.
func Sha1SumLTE(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSha1Sum), v))
	})
}

// Sha1SumContains applies the Contains predicate on the "sha1_sum" field.
func Sha1SumContains(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSha1Sum), v))
	})
}

// Sha1SumHasPrefix applies the HasPrefix predicate on the "sha1_sum" field.
func Sha1SumHasPrefix(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSha1Sum), v))
	})
}

// Sha1SumHasSuffix applies the HasSuffix predicate on the "sha1_sum" field.
func Sha1SumHasSuffix(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSha1Sum), v))
	})
}

// Sha1SumEqualFold applies the EqualFold predicate on the "sha1_sum" field.
func Sha1SumEqualFold(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSha1Sum), v))
	})
}

// Sha1SumContainsFold applies the ContainsFold predicate on the "sha1_sum" field.
func Sha1SumContainsFold(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSha1Sum), v))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...string) predicate.FileRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldState), v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...string) predicate.FileRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldState), v...))
	})
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldState), v))
	})
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldState), v))
	})
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldState), v))
	})
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldState), v))
	})
}

// StateContains applies the Contains predicate on the "state" field.
func StateContains(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldState), v))
	})
}

// StateHasPrefix applies the HasPrefix predicate on the "state" field.
func StateHasPrefix(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldState), v))
	})
}

// StateHasSuffix applies the HasSuffix predicate on the "state" field.
func StateHasSuffix(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldState), v))
	})
}

// StateEqualFold applies the EqualFold predicate on the "state" field.
func StateEqualFold(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldState), v))
	})
}

// StateContainsFold applies the ContainsFold predicate on the "state" field.
func StateContainsFold(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldState), v))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.FileRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.FileRecord {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FileRecord) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FileRecord) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FileRecord) predicate.FileRecord {
	return predicate.FileRecord(func(s *sql.Selector) {
		p(s.Not())
	})
}
