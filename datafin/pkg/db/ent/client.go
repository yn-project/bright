// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/google/uuid"
	"yun.tea/block/bright/datafin/pkg/db/ent/migrate"

	"yun.tea/block/bright/datafin/pkg/db/ent/datafin"
	"yun.tea/block/bright/datafin/pkg/db/ent/filerecord"
	"yun.tea/block/bright/datafin/pkg/db/ent/mqueue"
	"yun.tea/block/bright/datafin/pkg/db/ent/topic"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// DataFin is the client for interacting with the DataFin builders.
	DataFin *DataFinClient
	// FileRecord is the client for interacting with the FileRecord builders.
	FileRecord *FileRecordClient
	// Mqueue is the client for interacting with the Mqueue builders.
	Mqueue *MqueueClient
	// Topic is the client for interacting with the Topic builders.
	Topic *TopicClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.DataFin = NewDataFinClient(c.config)
	c.FileRecord = NewFileRecordClient(c.config)
	c.Mqueue = NewMqueueClient(c.config)
	c.Topic = NewTopicClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		DataFin:    NewDataFinClient(cfg),
		FileRecord: NewFileRecordClient(cfg),
		Mqueue:     NewMqueueClient(cfg),
		Topic:      NewTopicClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		DataFin:    NewDataFinClient(cfg),
		FileRecord: NewFileRecordClient(cfg),
		Mqueue:     NewMqueueClient(cfg),
		Topic:      NewTopicClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		DataFin.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.DataFin.Use(hooks...)
	c.FileRecord.Use(hooks...)
	c.Mqueue.Use(hooks...)
	c.Topic.Use(hooks...)
}

// DataFinClient is a client for the DataFin schema.
type DataFinClient struct {
	config
}

// NewDataFinClient returns a client for the DataFin from the given config.
func NewDataFinClient(c config) *DataFinClient {
	return &DataFinClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `datafin.Hooks(f(g(h())))`.
func (c *DataFinClient) Use(hooks ...Hook) {
	c.hooks.DataFin = append(c.hooks.DataFin, hooks...)
}

// Create returns a builder for creating a DataFin entity.
func (c *DataFinClient) Create() *DataFinCreate {
	mutation := newDataFinMutation(c.config, OpCreate)
	return &DataFinCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DataFin entities.
func (c *DataFinClient) CreateBulk(builders ...*DataFinCreate) *DataFinCreateBulk {
	return &DataFinCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DataFin.
func (c *DataFinClient) Update() *DataFinUpdate {
	mutation := newDataFinMutation(c.config, OpUpdate)
	return &DataFinUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DataFinClient) UpdateOne(df *DataFin) *DataFinUpdateOne {
	mutation := newDataFinMutation(c.config, OpUpdateOne, withDataFin(df))
	return &DataFinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DataFinClient) UpdateOneID(id uuid.UUID) *DataFinUpdateOne {
	mutation := newDataFinMutation(c.config, OpUpdateOne, withDataFinID(id))
	return &DataFinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DataFin.
func (c *DataFinClient) Delete() *DataFinDelete {
	mutation := newDataFinMutation(c.config, OpDelete)
	return &DataFinDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DataFinClient) DeleteOne(df *DataFin) *DataFinDeleteOne {
	return c.DeleteOneID(df.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *DataFinClient) DeleteOneID(id uuid.UUID) *DataFinDeleteOne {
	builder := c.Delete().Where(datafin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DataFinDeleteOne{builder}
}

// Query returns a query builder for DataFin.
func (c *DataFinClient) Query() *DataFinQuery {
	return &DataFinQuery{
		config: c.config,
	}
}

// Get returns a DataFin entity by its id.
func (c *DataFinClient) Get(ctx context.Context, id uuid.UUID) (*DataFin, error) {
	return c.Query().Where(datafin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DataFinClient) GetX(ctx context.Context, id uuid.UUID) *DataFin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DataFinClient) Hooks() []Hook {
	hooks := c.hooks.DataFin
	return append(hooks[:len(hooks):len(hooks)], datafin.Hooks[:]...)
}

// FileRecordClient is a client for the FileRecord schema.
type FileRecordClient struct {
	config
}

// NewFileRecordClient returns a client for the FileRecord from the given config.
func NewFileRecordClient(c config) *FileRecordClient {
	return &FileRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `filerecord.Hooks(f(g(h())))`.
func (c *FileRecordClient) Use(hooks ...Hook) {
	c.hooks.FileRecord = append(c.hooks.FileRecord, hooks...)
}

// Create returns a builder for creating a FileRecord entity.
func (c *FileRecordClient) Create() *FileRecordCreate {
	mutation := newFileRecordMutation(c.config, OpCreate)
	return &FileRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FileRecord entities.
func (c *FileRecordClient) CreateBulk(builders ...*FileRecordCreate) *FileRecordCreateBulk {
	return &FileRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FileRecord.
func (c *FileRecordClient) Update() *FileRecordUpdate {
	mutation := newFileRecordMutation(c.config, OpUpdate)
	return &FileRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FileRecordClient) UpdateOne(fr *FileRecord) *FileRecordUpdateOne {
	mutation := newFileRecordMutation(c.config, OpUpdateOne, withFileRecord(fr))
	return &FileRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FileRecordClient) UpdateOneID(id uuid.UUID) *FileRecordUpdateOne {
	mutation := newFileRecordMutation(c.config, OpUpdateOne, withFileRecordID(id))
	return &FileRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FileRecord.
func (c *FileRecordClient) Delete() *FileRecordDelete {
	mutation := newFileRecordMutation(c.config, OpDelete)
	return &FileRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FileRecordClient) DeleteOne(fr *FileRecord) *FileRecordDeleteOne {
	return c.DeleteOneID(fr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *FileRecordClient) DeleteOneID(id uuid.UUID) *FileRecordDeleteOne {
	builder := c.Delete().Where(filerecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FileRecordDeleteOne{builder}
}

// Query returns a query builder for FileRecord.
func (c *FileRecordClient) Query() *FileRecordQuery {
	return &FileRecordQuery{
		config: c.config,
	}
}

// Get returns a FileRecord entity by its id.
func (c *FileRecordClient) Get(ctx context.Context, id uuid.UUID) (*FileRecord, error) {
	return c.Query().Where(filerecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FileRecordClient) GetX(ctx context.Context, id uuid.UUID) *FileRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FileRecordClient) Hooks() []Hook {
	hooks := c.hooks.FileRecord
	return append(hooks[:len(hooks):len(hooks)], filerecord.Hooks[:]...)
}

// MqueueClient is a client for the Mqueue schema.
type MqueueClient struct {
	config
}

// NewMqueueClient returns a client for the Mqueue from the given config.
func NewMqueueClient(c config) *MqueueClient {
	return &MqueueClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mqueue.Hooks(f(g(h())))`.
func (c *MqueueClient) Use(hooks ...Hook) {
	c.hooks.Mqueue = append(c.hooks.Mqueue, hooks...)
}

// Create returns a builder for creating a Mqueue entity.
func (c *MqueueClient) Create() *MqueueCreate {
	mutation := newMqueueMutation(c.config, OpCreate)
	return &MqueueCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Mqueue entities.
func (c *MqueueClient) CreateBulk(builders ...*MqueueCreate) *MqueueCreateBulk {
	return &MqueueCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Mqueue.
func (c *MqueueClient) Update() *MqueueUpdate {
	mutation := newMqueueMutation(c.config, OpUpdate)
	return &MqueueUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MqueueClient) UpdateOne(m *Mqueue) *MqueueUpdateOne {
	mutation := newMqueueMutation(c.config, OpUpdateOne, withMqueue(m))
	return &MqueueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MqueueClient) UpdateOneID(id uuid.UUID) *MqueueUpdateOne {
	mutation := newMqueueMutation(c.config, OpUpdateOne, withMqueueID(id))
	return &MqueueUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Mqueue.
func (c *MqueueClient) Delete() *MqueueDelete {
	mutation := newMqueueMutation(c.config, OpDelete)
	return &MqueueDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MqueueClient) DeleteOne(m *Mqueue) *MqueueDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *MqueueClient) DeleteOneID(id uuid.UUID) *MqueueDeleteOne {
	builder := c.Delete().Where(mqueue.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MqueueDeleteOne{builder}
}

// Query returns a query builder for Mqueue.
func (c *MqueueClient) Query() *MqueueQuery {
	return &MqueueQuery{
		config: c.config,
	}
}

// Get returns a Mqueue entity by its id.
func (c *MqueueClient) Get(ctx context.Context, id uuid.UUID) (*Mqueue, error) {
	return c.Query().Where(mqueue.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MqueueClient) GetX(ctx context.Context, id uuid.UUID) *Mqueue {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MqueueClient) Hooks() []Hook {
	hooks := c.hooks.Mqueue
	return append(hooks[:len(hooks):len(hooks)], mqueue.Hooks[:]...)
}

// TopicClient is a client for the Topic schema.
type TopicClient struct {
	config
}

// NewTopicClient returns a client for the Topic from the given config.
func NewTopicClient(c config) *TopicClient {
	return &TopicClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `topic.Hooks(f(g(h())))`.
func (c *TopicClient) Use(hooks ...Hook) {
	c.hooks.Topic = append(c.hooks.Topic, hooks...)
}

// Create returns a builder for creating a Topic entity.
func (c *TopicClient) Create() *TopicCreate {
	mutation := newTopicMutation(c.config, OpCreate)
	return &TopicCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Topic entities.
func (c *TopicClient) CreateBulk(builders ...*TopicCreate) *TopicCreateBulk {
	return &TopicCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Topic.
func (c *TopicClient) Update() *TopicUpdate {
	mutation := newTopicMutation(c.config, OpUpdate)
	return &TopicUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TopicClient) UpdateOne(t *Topic) *TopicUpdateOne {
	mutation := newTopicMutation(c.config, OpUpdateOne, withTopic(t))
	return &TopicUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TopicClient) UpdateOneID(id uuid.UUID) *TopicUpdateOne {
	mutation := newTopicMutation(c.config, OpUpdateOne, withTopicID(id))
	return &TopicUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Topic.
func (c *TopicClient) Delete() *TopicDelete {
	mutation := newTopicMutation(c.config, OpDelete)
	return &TopicDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TopicClient) DeleteOne(t *Topic) *TopicDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TopicClient) DeleteOneID(id uuid.UUID) *TopicDeleteOne {
	builder := c.Delete().Where(topic.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TopicDeleteOne{builder}
}

// Query returns a query builder for Topic.
func (c *TopicClient) Query() *TopicQuery {
	return &TopicQuery{
		config: c.config,
	}
}

// Get returns a Topic entity by its id.
func (c *TopicClient) Get(ctx context.Context, id uuid.UUID) (*Topic, error) {
	return c.Query().Where(topic.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TopicClient) GetX(ctx context.Context, id uuid.UUID) *Topic {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TopicClient) Hooks() []Hook {
	hooks := c.hooks.Topic
	return append(hooks[:len(hooks):len(hooks)], topic.Hooks[:]...)
}
