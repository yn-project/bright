// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"yun.tea/block/bright/datafin/pkg/db/ent/mqueue"
	"yun.tea/block/bright/datafin/pkg/db/ent/predicate"
)

// MqueueUpdate is the builder for updating Mqueue entities.
type MqueueUpdate struct {
	config
	hooks     []Hook
	mutation  *MqueueMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MqueueUpdate builder.
func (mu *MqueueUpdate) Where(ps ...predicate.Mqueue) *MqueueUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetCreatedAt sets the "created_at" field.
func (mu *MqueueUpdate) SetCreatedAt(u uint32) *MqueueUpdate {
	mu.mutation.ResetCreatedAt()
	mu.mutation.SetCreatedAt(u)
	return mu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mu *MqueueUpdate) SetNillableCreatedAt(u *uint32) *MqueueUpdate {
	if u != nil {
		mu.SetCreatedAt(*u)
	}
	return mu
}

// AddCreatedAt adds u to the "created_at" field.
func (mu *MqueueUpdate) AddCreatedAt(u int32) *MqueueUpdate {
	mu.mutation.AddCreatedAt(u)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MqueueUpdate) SetUpdatedAt(u uint32) *MqueueUpdate {
	mu.mutation.ResetUpdatedAt()
	mu.mutation.SetUpdatedAt(u)
	return mu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (mu *MqueueUpdate) AddUpdatedAt(u int32) *MqueueUpdate {
	mu.mutation.AddUpdatedAt(u)
	return mu
}

// SetDeletedAt sets the "deleted_at" field.
func (mu *MqueueUpdate) SetDeletedAt(u uint32) *MqueueUpdate {
	mu.mutation.ResetDeletedAt()
	mu.mutation.SetDeletedAt(u)
	return mu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mu *MqueueUpdate) SetNillableDeletedAt(u *uint32) *MqueueUpdate {
	if u != nil {
		mu.SetDeletedAt(*u)
	}
	return mu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (mu *MqueueUpdate) AddDeletedAt(u int32) *MqueueUpdate {
	mu.mutation.AddDeletedAt(u)
	return mu
}

// SetName sets the "name" field.
func (mu *MqueueUpdate) SetName(s string) *MqueueUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetDescription sets the "description" field.
func (mu *MqueueUpdate) SetDescription(s string) *MqueueUpdate {
	mu.mutation.SetDescription(s)
	return mu
}

// SetTopicName sets the "topic_name" field.
func (mu *MqueueUpdate) SetTopicName(s string) *MqueueUpdate {
	mu.mutation.SetTopicName(s)
	return mu
}

// Mutation returns the MqueueMutation object of the builder.
func (mu *MqueueUpdate) Mutation() *MqueueMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MqueueUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := mu.defaults(); err != nil {
		return 0, err
	}
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MqueueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			if mu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MqueueUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MqueueUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MqueueUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MqueueUpdate) defaults() error {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		if mqueue.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized mqueue.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := mqueue.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mu *MqueueUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MqueueUpdate {
	mu.modifiers = append(mu.modifiers, modifiers...)
	return mu
}

func (mu *MqueueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mqueue.Table,
			Columns: mqueue.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: mqueue.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: mqueue.FieldCreatedAt,
		})
	}
	if value, ok := mu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: mqueue.FieldCreatedAt,
		})
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: mqueue.FieldUpdatedAt,
		})
	}
	if value, ok := mu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: mqueue.FieldUpdatedAt,
		})
	}
	if value, ok := mu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: mqueue.FieldDeletedAt,
		})
	}
	if value, ok := mu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: mqueue.FieldDeletedAt,
		})
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mqueue.FieldName,
		})
	}
	if value, ok := mu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mqueue.FieldDescription,
		})
	}
	if value, ok := mu.mutation.TopicName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mqueue.FieldTopicName,
		})
	}
	_spec.Modifiers = mu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mqueue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// MqueueUpdateOne is the builder for updating a single Mqueue entity.
type MqueueUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MqueueMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (muo *MqueueUpdateOne) SetCreatedAt(u uint32) *MqueueUpdateOne {
	muo.mutation.ResetCreatedAt()
	muo.mutation.SetCreatedAt(u)
	return muo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muo *MqueueUpdateOne) SetNillableCreatedAt(u *uint32) *MqueueUpdateOne {
	if u != nil {
		muo.SetCreatedAt(*u)
	}
	return muo
}

// AddCreatedAt adds u to the "created_at" field.
func (muo *MqueueUpdateOne) AddCreatedAt(u int32) *MqueueUpdateOne {
	muo.mutation.AddCreatedAt(u)
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MqueueUpdateOne) SetUpdatedAt(u uint32) *MqueueUpdateOne {
	muo.mutation.ResetUpdatedAt()
	muo.mutation.SetUpdatedAt(u)
	return muo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (muo *MqueueUpdateOne) AddUpdatedAt(u int32) *MqueueUpdateOne {
	muo.mutation.AddUpdatedAt(u)
	return muo
}

// SetDeletedAt sets the "deleted_at" field.
func (muo *MqueueUpdateOne) SetDeletedAt(u uint32) *MqueueUpdateOne {
	muo.mutation.ResetDeletedAt()
	muo.mutation.SetDeletedAt(u)
	return muo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (muo *MqueueUpdateOne) SetNillableDeletedAt(u *uint32) *MqueueUpdateOne {
	if u != nil {
		muo.SetDeletedAt(*u)
	}
	return muo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (muo *MqueueUpdateOne) AddDeletedAt(u int32) *MqueueUpdateOne {
	muo.mutation.AddDeletedAt(u)
	return muo
}

// SetName sets the "name" field.
func (muo *MqueueUpdateOne) SetName(s string) *MqueueUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetDescription sets the "description" field.
func (muo *MqueueUpdateOne) SetDescription(s string) *MqueueUpdateOne {
	muo.mutation.SetDescription(s)
	return muo
}

// SetTopicName sets the "topic_name" field.
func (muo *MqueueUpdateOne) SetTopicName(s string) *MqueueUpdateOne {
	muo.mutation.SetTopicName(s)
	return muo
}

// Mutation returns the MqueueMutation object of the builder.
func (muo *MqueueUpdateOne) Mutation() *MqueueMutation {
	return muo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MqueueUpdateOne) Select(field string, fields ...string) *MqueueUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Mqueue entity.
func (muo *MqueueUpdateOne) Save(ctx context.Context) (*Mqueue, error) {
	var (
		err  error
		node *Mqueue
	)
	if err := muo.defaults(); err != nil {
		return nil, err
	}
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MqueueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			if muo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, muo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Mqueue)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MqueueMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MqueueUpdateOne) SaveX(ctx context.Context) *Mqueue {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MqueueUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MqueueUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MqueueUpdateOne) defaults() error {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		if mqueue.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized mqueue.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := mqueue.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (muo *MqueueUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MqueueUpdateOne {
	muo.modifiers = append(muo.modifiers, modifiers...)
	return muo
}

func (muo *MqueueUpdateOne) sqlSave(ctx context.Context) (_node *Mqueue, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mqueue.Table,
			Columns: mqueue.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: mqueue.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Mqueue.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mqueue.FieldID)
		for _, f := range fields {
			if !mqueue.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mqueue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: mqueue.FieldCreatedAt,
		})
	}
	if value, ok := muo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: mqueue.FieldCreatedAt,
		})
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: mqueue.FieldUpdatedAt,
		})
	}
	if value, ok := muo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: mqueue.FieldUpdatedAt,
		})
	}
	if value, ok := muo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: mqueue.FieldDeletedAt,
		})
	}
	if value, ok := muo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: mqueue.FieldDeletedAt,
		})
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mqueue.FieldName,
		})
	}
	if value, ok := muo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mqueue.FieldDescription,
		})
	}
	if value, ok := muo.mutation.TopicName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mqueue.FieldTopicName,
		})
	}
	_spec.Modifiers = muo.modifiers
	_node = &Mqueue{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mqueue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
