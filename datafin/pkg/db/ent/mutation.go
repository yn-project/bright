// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/google/uuid"
	"yun.tea/block/bright/datafin/pkg/db/ent/datafin"
	"yun.tea/block/bright/datafin/pkg/db/ent/filerecord"
	"yun.tea/block/bright/datafin/pkg/db/ent/mqueue"
	"yun.tea/block/bright/datafin/pkg/db/ent/predicate"
	"yun.tea/block/bright/datafin/pkg/db/ent/topic"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDataFin    = "DataFin"
	TypeFileRecord = "FileRecord"
	TypeMqueue     = "Mqueue"
	TypeTopic      = "Topic"
)

// DataFinMutation represents an operation that mutates the DataFin nodes in the graph.
type DataFinMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	topic_id      *string
	data_id       *string
	datafin       *string
	tx_time       *uint32
	addtx_time    *int32
	tx_hash       *string
	state         *string
	retries       *uint32
	addretries    *int32
	remark        *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*DataFin, error)
	predicates    []predicate.DataFin
}

var _ ent.Mutation = (*DataFinMutation)(nil)

// datafinOption allows management of the mutation configuration using functional options.
type datafinOption func(*DataFinMutation)

// newDataFinMutation creates new mutation for the DataFin entity.
func newDataFinMutation(c config, op Op, opts ...datafinOption) *DataFinMutation {
	m := &DataFinMutation{
		config:        c,
		op:            op,
		typ:           TypeDataFin,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDataFinID sets the ID field of the mutation.
func withDataFinID(id uuid.UUID) datafinOption {
	return func(m *DataFinMutation) {
		var (
			err   error
			once  sync.Once
			value *DataFin
		)
		m.oldValue = func(ctx context.Context) (*DataFin, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DataFin.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDataFin sets the old DataFin of the mutation.
func withDataFin(node *DataFin) datafinOption {
	return func(m *DataFinMutation) {
		m.oldValue = func(context.Context) (*DataFin, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DataFinMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DataFinMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DataFin entities.
func (m *DataFinMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DataFinMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DataFinMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DataFin.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *DataFinMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DataFinMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the DataFin entity.
// If the DataFin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataFinMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *DataFinMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *DataFinMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DataFinMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DataFinMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DataFinMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the DataFin entity.
// If the DataFin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataFinMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *DataFinMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *DataFinMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DataFinMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *DataFinMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *DataFinMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the DataFin entity.
// If the DataFin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataFinMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *DataFinMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *DataFinMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *DataFinMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetTopicID sets the "topic_id" field.
func (m *DataFinMutation) SetTopicID(s string) {
	m.topic_id = &s
}

// TopicID returns the value of the "topic_id" field in the mutation.
func (m *DataFinMutation) TopicID() (r string, exists bool) {
	v := m.topic_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTopicID returns the old "topic_id" field's value of the DataFin entity.
// If the DataFin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataFinMutation) OldTopicID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTopicID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTopicID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTopicID: %w", err)
	}
	return oldValue.TopicID, nil
}

// ResetTopicID resets all changes to the "topic_id" field.
func (m *DataFinMutation) ResetTopicID() {
	m.topic_id = nil
}

// SetDataID sets the "data_id" field.
func (m *DataFinMutation) SetDataID(s string) {
	m.data_id = &s
}

// DataID returns the value of the "data_id" field in the mutation.
func (m *DataFinMutation) DataID() (r string, exists bool) {
	v := m.data_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDataID returns the old "data_id" field's value of the DataFin entity.
// If the DataFin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataFinMutation) OldDataID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDataID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDataID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDataID: %w", err)
	}
	return oldValue.DataID, nil
}

// ResetDataID resets all changes to the "data_id" field.
func (m *DataFinMutation) ResetDataID() {
	m.data_id = nil
}

// SetDatafin sets the "datafin" field.
func (m *DataFinMutation) SetDatafin(s string) {
	m.datafin = &s
}

// Datafin returns the value of the "datafin" field in the mutation.
func (m *DataFinMutation) Datafin() (r string, exists bool) {
	v := m.datafin
	if v == nil {
		return
	}
	return *v, true
}

// OldDatafin returns the old "datafin" field's value of the DataFin entity.
// If the DataFin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataFinMutation) OldDatafin(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDatafin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDatafin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDatafin: %w", err)
	}
	return oldValue.Datafin, nil
}

// ResetDatafin resets all changes to the "datafin" field.
func (m *DataFinMutation) ResetDatafin() {
	m.datafin = nil
}

// SetTxTime sets the "tx_time" field.
func (m *DataFinMutation) SetTxTime(u uint32) {
	m.tx_time = &u
	m.addtx_time = nil
}

// TxTime returns the value of the "tx_time" field in the mutation.
func (m *DataFinMutation) TxTime() (r uint32, exists bool) {
	v := m.tx_time
	if v == nil {
		return
	}
	return *v, true
}

// OldTxTime returns the old "tx_time" field's value of the DataFin entity.
// If the DataFin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataFinMutation) OldTxTime(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxTime: %w", err)
	}
	return oldValue.TxTime, nil
}

// AddTxTime adds u to the "tx_time" field.
func (m *DataFinMutation) AddTxTime(u int32) {
	if m.addtx_time != nil {
		*m.addtx_time += u
	} else {
		m.addtx_time = &u
	}
}

// AddedTxTime returns the value that was added to the "tx_time" field in this mutation.
func (m *DataFinMutation) AddedTxTime() (r int32, exists bool) {
	v := m.addtx_time
	if v == nil {
		return
	}
	return *v, true
}

// ClearTxTime clears the value of the "tx_time" field.
func (m *DataFinMutation) ClearTxTime() {
	m.tx_time = nil
	m.addtx_time = nil
	m.clearedFields[datafin.FieldTxTime] = struct{}{}
}

// TxTimeCleared returns if the "tx_time" field was cleared in this mutation.
func (m *DataFinMutation) TxTimeCleared() bool {
	_, ok := m.clearedFields[datafin.FieldTxTime]
	return ok
}

// ResetTxTime resets all changes to the "tx_time" field.
func (m *DataFinMutation) ResetTxTime() {
	m.tx_time = nil
	m.addtx_time = nil
	delete(m.clearedFields, datafin.FieldTxTime)
}

// SetTxHash sets the "tx_hash" field.
func (m *DataFinMutation) SetTxHash(s string) {
	m.tx_hash = &s
}

// TxHash returns the value of the "tx_hash" field in the mutation.
func (m *DataFinMutation) TxHash() (r string, exists bool) {
	v := m.tx_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldTxHash returns the old "tx_hash" field's value of the DataFin entity.
// If the DataFin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataFinMutation) OldTxHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxHash: %w", err)
	}
	return oldValue.TxHash, nil
}

// ClearTxHash clears the value of the "tx_hash" field.
func (m *DataFinMutation) ClearTxHash() {
	m.tx_hash = nil
	m.clearedFields[datafin.FieldTxHash] = struct{}{}
}

// TxHashCleared returns if the "tx_hash" field was cleared in this mutation.
func (m *DataFinMutation) TxHashCleared() bool {
	_, ok := m.clearedFields[datafin.FieldTxHash]
	return ok
}

// ResetTxHash resets all changes to the "tx_hash" field.
func (m *DataFinMutation) ResetTxHash() {
	m.tx_hash = nil
	delete(m.clearedFields, datafin.FieldTxHash)
}

// SetState sets the "state" field.
func (m *DataFinMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *DataFinMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the DataFin entity.
// If the DataFin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataFinMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *DataFinMutation) ResetState() {
	m.state = nil
}

// SetRetries sets the "retries" field.
func (m *DataFinMutation) SetRetries(u uint32) {
	m.retries = &u
	m.addretries = nil
}

// Retries returns the value of the "retries" field in the mutation.
func (m *DataFinMutation) Retries() (r uint32, exists bool) {
	v := m.retries
	if v == nil {
		return
	}
	return *v, true
}

// OldRetries returns the old "retries" field's value of the DataFin entity.
// If the DataFin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataFinMutation) OldRetries(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRetries is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRetries requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRetries: %w", err)
	}
	return oldValue.Retries, nil
}

// AddRetries adds u to the "retries" field.
func (m *DataFinMutation) AddRetries(u int32) {
	if m.addretries != nil {
		*m.addretries += u
	} else {
		m.addretries = &u
	}
}

// AddedRetries returns the value that was added to the "retries" field in this mutation.
func (m *DataFinMutation) AddedRetries() (r int32, exists bool) {
	v := m.addretries
	if v == nil {
		return
	}
	return *v, true
}

// ResetRetries resets all changes to the "retries" field.
func (m *DataFinMutation) ResetRetries() {
	m.retries = nil
	m.addretries = nil
}

// SetRemark sets the "remark" field.
func (m *DataFinMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *DataFinMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the DataFin entity.
// If the DataFin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DataFinMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *DataFinMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[datafin.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *DataFinMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[datafin.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *DataFinMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, datafin.FieldRemark)
}

// Where appends a list predicates to the DataFinMutation builder.
func (m *DataFinMutation) Where(ps ...predicate.DataFin) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DataFinMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DataFin).
func (m *DataFinMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DataFinMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, datafin.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, datafin.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, datafin.FieldDeletedAt)
	}
	if m.topic_id != nil {
		fields = append(fields, datafin.FieldTopicID)
	}
	if m.data_id != nil {
		fields = append(fields, datafin.FieldDataID)
	}
	if m.datafin != nil {
		fields = append(fields, datafin.FieldDatafin)
	}
	if m.tx_time != nil {
		fields = append(fields, datafin.FieldTxTime)
	}
	if m.tx_hash != nil {
		fields = append(fields, datafin.FieldTxHash)
	}
	if m.state != nil {
		fields = append(fields, datafin.FieldState)
	}
	if m.retries != nil {
		fields = append(fields, datafin.FieldRetries)
	}
	if m.remark != nil {
		fields = append(fields, datafin.FieldRemark)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DataFinMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case datafin.FieldCreatedAt:
		return m.CreatedAt()
	case datafin.FieldUpdatedAt:
		return m.UpdatedAt()
	case datafin.FieldDeletedAt:
		return m.DeletedAt()
	case datafin.FieldTopicID:
		return m.TopicID()
	case datafin.FieldDataID:
		return m.DataID()
	case datafin.FieldDatafin:
		return m.Datafin()
	case datafin.FieldTxTime:
		return m.TxTime()
	case datafin.FieldTxHash:
		return m.TxHash()
	case datafin.FieldState:
		return m.State()
	case datafin.FieldRetries:
		return m.Retries()
	case datafin.FieldRemark:
		return m.Remark()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DataFinMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case datafin.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case datafin.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case datafin.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case datafin.FieldTopicID:
		return m.OldTopicID(ctx)
	case datafin.FieldDataID:
		return m.OldDataID(ctx)
	case datafin.FieldDatafin:
		return m.OldDatafin(ctx)
	case datafin.FieldTxTime:
		return m.OldTxTime(ctx)
	case datafin.FieldTxHash:
		return m.OldTxHash(ctx)
	case datafin.FieldState:
		return m.OldState(ctx)
	case datafin.FieldRetries:
		return m.OldRetries(ctx)
	case datafin.FieldRemark:
		return m.OldRemark(ctx)
	}
	return nil, fmt.Errorf("unknown DataFin field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DataFinMutation) SetField(name string, value ent.Value) error {
	switch name {
	case datafin.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case datafin.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case datafin.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case datafin.FieldTopicID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTopicID(v)
		return nil
	case datafin.FieldDataID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDataID(v)
		return nil
	case datafin.FieldDatafin:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDatafin(v)
		return nil
	case datafin.FieldTxTime:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxTime(v)
		return nil
	case datafin.FieldTxHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxHash(v)
		return nil
	case datafin.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case datafin.FieldRetries:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRetries(v)
		return nil
	case datafin.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	}
	return fmt.Errorf("unknown DataFin field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DataFinMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, datafin.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, datafin.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, datafin.FieldDeletedAt)
	}
	if m.addtx_time != nil {
		fields = append(fields, datafin.FieldTxTime)
	}
	if m.addretries != nil {
		fields = append(fields, datafin.FieldRetries)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DataFinMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case datafin.FieldCreatedAt:
		return m.AddedCreatedAt()
	case datafin.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case datafin.FieldDeletedAt:
		return m.AddedDeletedAt()
	case datafin.FieldTxTime:
		return m.AddedTxTime()
	case datafin.FieldRetries:
		return m.AddedRetries()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DataFinMutation) AddField(name string, value ent.Value) error {
	switch name {
	case datafin.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case datafin.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case datafin.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case datafin.FieldTxTime:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTxTime(v)
		return nil
	case datafin.FieldRetries:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRetries(v)
		return nil
	}
	return fmt.Errorf("unknown DataFin numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DataFinMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(datafin.FieldTxTime) {
		fields = append(fields, datafin.FieldTxTime)
	}
	if m.FieldCleared(datafin.FieldTxHash) {
		fields = append(fields, datafin.FieldTxHash)
	}
	if m.FieldCleared(datafin.FieldRemark) {
		fields = append(fields, datafin.FieldRemark)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DataFinMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DataFinMutation) ClearField(name string) error {
	switch name {
	case datafin.FieldTxTime:
		m.ClearTxTime()
		return nil
	case datafin.FieldTxHash:
		m.ClearTxHash()
		return nil
	case datafin.FieldRemark:
		m.ClearRemark()
		return nil
	}
	return fmt.Errorf("unknown DataFin nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DataFinMutation) ResetField(name string) error {
	switch name {
	case datafin.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case datafin.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case datafin.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case datafin.FieldTopicID:
		m.ResetTopicID()
		return nil
	case datafin.FieldDataID:
		m.ResetDataID()
		return nil
	case datafin.FieldDatafin:
		m.ResetDatafin()
		return nil
	case datafin.FieldTxTime:
		m.ResetTxTime()
		return nil
	case datafin.FieldTxHash:
		m.ResetTxHash()
		return nil
	case datafin.FieldState:
		m.ResetState()
		return nil
	case datafin.FieldRetries:
		m.ResetRetries()
		return nil
	case datafin.FieldRemark:
		m.ResetRemark()
		return nil
	}
	return fmt.Errorf("unknown DataFin field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DataFinMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DataFinMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DataFinMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DataFinMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DataFinMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DataFinMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DataFinMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown DataFin unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DataFinMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown DataFin edge %s", name)
}

// FileRecordMutation represents an operation that mutates the FileRecord nodes in the graph.
type FileRecordMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	file_name     *string
	topic_id      *string
	record_num    *uint32
	addrecord_num *int32
	sha1_sum      *string
	state         *string
	remark        *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*FileRecord, error)
	predicates    []predicate.FileRecord
}

var _ ent.Mutation = (*FileRecordMutation)(nil)

// filerecordOption allows management of the mutation configuration using functional options.
type filerecordOption func(*FileRecordMutation)

// newFileRecordMutation creates new mutation for the FileRecord entity.
func newFileRecordMutation(c config, op Op, opts ...filerecordOption) *FileRecordMutation {
	m := &FileRecordMutation{
		config:        c,
		op:            op,
		typ:           TypeFileRecord,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFileRecordID sets the ID field of the mutation.
func withFileRecordID(id uuid.UUID) filerecordOption {
	return func(m *FileRecordMutation) {
		var (
			err   error
			once  sync.Once
			value *FileRecord
		)
		m.oldValue = func(ctx context.Context) (*FileRecord, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FileRecord.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFileRecord sets the old FileRecord of the mutation.
func withFileRecord(node *FileRecord) filerecordOption {
	return func(m *FileRecordMutation) {
		m.oldValue = func(context.Context) (*FileRecord, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FileRecordMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FileRecordMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of FileRecord entities.
func (m *FileRecordMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FileRecordMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FileRecordMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FileRecord.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *FileRecordMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FileRecordMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the FileRecord entity.
// If the FileRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileRecordMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *FileRecordMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *FileRecordMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FileRecordMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FileRecordMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FileRecordMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the FileRecord entity.
// If the FileRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileRecordMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *FileRecordMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *FileRecordMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FileRecordMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *FileRecordMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *FileRecordMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the FileRecord entity.
// If the FileRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileRecordMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *FileRecordMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *FileRecordMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *FileRecordMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetFileName sets the "file_name" field.
func (m *FileRecordMutation) SetFileName(s string) {
	m.file_name = &s
}

// FileName returns the value of the "file_name" field in the mutation.
func (m *FileRecordMutation) FileName() (r string, exists bool) {
	v := m.file_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFileName returns the old "file_name" field's value of the FileRecord entity.
// If the FileRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileRecordMutation) OldFileName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileName: %w", err)
	}
	return oldValue.FileName, nil
}

// ResetFileName resets all changes to the "file_name" field.
func (m *FileRecordMutation) ResetFileName() {
	m.file_name = nil
}

// SetTopicID sets the "topic_id" field.
func (m *FileRecordMutation) SetTopicID(s string) {
	m.topic_id = &s
}

// TopicID returns the value of the "topic_id" field in the mutation.
func (m *FileRecordMutation) TopicID() (r string, exists bool) {
	v := m.topic_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTopicID returns the old "topic_id" field's value of the FileRecord entity.
// If the FileRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileRecordMutation) OldTopicID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTopicID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTopicID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTopicID: %w", err)
	}
	return oldValue.TopicID, nil
}

// ResetTopicID resets all changes to the "topic_id" field.
func (m *FileRecordMutation) ResetTopicID() {
	m.topic_id = nil
}

// SetRecordNum sets the "record_num" field.
func (m *FileRecordMutation) SetRecordNum(u uint32) {
	m.record_num = &u
	m.addrecord_num = nil
}

// RecordNum returns the value of the "record_num" field in the mutation.
func (m *FileRecordMutation) RecordNum() (r uint32, exists bool) {
	v := m.record_num
	if v == nil {
		return
	}
	return *v, true
}

// OldRecordNum returns the old "record_num" field's value of the FileRecord entity.
// If the FileRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileRecordMutation) OldRecordNum(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRecordNum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRecordNum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecordNum: %w", err)
	}
	return oldValue.RecordNum, nil
}

// AddRecordNum adds u to the "record_num" field.
func (m *FileRecordMutation) AddRecordNum(u int32) {
	if m.addrecord_num != nil {
		*m.addrecord_num += u
	} else {
		m.addrecord_num = &u
	}
}

// AddedRecordNum returns the value that was added to the "record_num" field in this mutation.
func (m *FileRecordMutation) AddedRecordNum() (r int32, exists bool) {
	v := m.addrecord_num
	if v == nil {
		return
	}
	return *v, true
}

// ResetRecordNum resets all changes to the "record_num" field.
func (m *FileRecordMutation) ResetRecordNum() {
	m.record_num = nil
	m.addrecord_num = nil
}

// SetSha1Sum sets the "sha1_sum" field.
func (m *FileRecordMutation) SetSha1Sum(s string) {
	m.sha1_sum = &s
}

// Sha1Sum returns the value of the "sha1_sum" field in the mutation.
func (m *FileRecordMutation) Sha1Sum() (r string, exists bool) {
	v := m.sha1_sum
	if v == nil {
		return
	}
	return *v, true
}

// OldSha1Sum returns the old "sha1_sum" field's value of the FileRecord entity.
// If the FileRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileRecordMutation) OldSha1Sum(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSha1Sum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSha1Sum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSha1Sum: %w", err)
	}
	return oldValue.Sha1Sum, nil
}

// ResetSha1Sum resets all changes to the "sha1_sum" field.
func (m *FileRecordMutation) ResetSha1Sum() {
	m.sha1_sum = nil
}

// SetState sets the "state" field.
func (m *FileRecordMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *FileRecordMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the FileRecord entity.
// If the FileRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileRecordMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *FileRecordMutation) ResetState() {
	m.state = nil
}

// SetRemark sets the "remark" field.
func (m *FileRecordMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *FileRecordMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the FileRecord entity.
// If the FileRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileRecordMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *FileRecordMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[filerecord.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *FileRecordMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[filerecord.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *FileRecordMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, filerecord.FieldRemark)
}

// Where appends a list predicates to the FileRecordMutation builder.
func (m *FileRecordMutation) Where(ps ...predicate.FileRecord) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *FileRecordMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (FileRecord).
func (m *FileRecordMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FileRecordMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, filerecord.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, filerecord.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, filerecord.FieldDeletedAt)
	}
	if m.file_name != nil {
		fields = append(fields, filerecord.FieldFileName)
	}
	if m.topic_id != nil {
		fields = append(fields, filerecord.FieldTopicID)
	}
	if m.record_num != nil {
		fields = append(fields, filerecord.FieldRecordNum)
	}
	if m.sha1_sum != nil {
		fields = append(fields, filerecord.FieldSha1Sum)
	}
	if m.state != nil {
		fields = append(fields, filerecord.FieldState)
	}
	if m.remark != nil {
		fields = append(fields, filerecord.FieldRemark)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FileRecordMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case filerecord.FieldCreatedAt:
		return m.CreatedAt()
	case filerecord.FieldUpdatedAt:
		return m.UpdatedAt()
	case filerecord.FieldDeletedAt:
		return m.DeletedAt()
	case filerecord.FieldFileName:
		return m.FileName()
	case filerecord.FieldTopicID:
		return m.TopicID()
	case filerecord.FieldRecordNum:
		return m.RecordNum()
	case filerecord.FieldSha1Sum:
		return m.Sha1Sum()
	case filerecord.FieldState:
		return m.State()
	case filerecord.FieldRemark:
		return m.Remark()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FileRecordMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case filerecord.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case filerecord.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case filerecord.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case filerecord.FieldFileName:
		return m.OldFileName(ctx)
	case filerecord.FieldTopicID:
		return m.OldTopicID(ctx)
	case filerecord.FieldRecordNum:
		return m.OldRecordNum(ctx)
	case filerecord.FieldSha1Sum:
		return m.OldSha1Sum(ctx)
	case filerecord.FieldState:
		return m.OldState(ctx)
	case filerecord.FieldRemark:
		return m.OldRemark(ctx)
	}
	return nil, fmt.Errorf("unknown FileRecord field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileRecordMutation) SetField(name string, value ent.Value) error {
	switch name {
	case filerecord.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case filerecord.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case filerecord.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case filerecord.FieldFileName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileName(v)
		return nil
	case filerecord.FieldTopicID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTopicID(v)
		return nil
	case filerecord.FieldRecordNum:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecordNum(v)
		return nil
	case filerecord.FieldSha1Sum:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSha1Sum(v)
		return nil
	case filerecord.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case filerecord.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	}
	return fmt.Errorf("unknown FileRecord field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FileRecordMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, filerecord.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, filerecord.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, filerecord.FieldDeletedAt)
	}
	if m.addrecord_num != nil {
		fields = append(fields, filerecord.FieldRecordNum)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FileRecordMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case filerecord.FieldCreatedAt:
		return m.AddedCreatedAt()
	case filerecord.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case filerecord.FieldDeletedAt:
		return m.AddedDeletedAt()
	case filerecord.FieldRecordNum:
		return m.AddedRecordNum()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileRecordMutation) AddField(name string, value ent.Value) error {
	switch name {
	case filerecord.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case filerecord.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case filerecord.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	case filerecord.FieldRecordNum:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRecordNum(v)
		return nil
	}
	return fmt.Errorf("unknown FileRecord numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FileRecordMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(filerecord.FieldRemark) {
		fields = append(fields, filerecord.FieldRemark)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FileRecordMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FileRecordMutation) ClearField(name string) error {
	switch name {
	case filerecord.FieldRemark:
		m.ClearRemark()
		return nil
	}
	return fmt.Errorf("unknown FileRecord nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FileRecordMutation) ResetField(name string) error {
	switch name {
	case filerecord.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case filerecord.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case filerecord.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case filerecord.FieldFileName:
		m.ResetFileName()
		return nil
	case filerecord.FieldTopicID:
		m.ResetTopicID()
		return nil
	case filerecord.FieldRecordNum:
		m.ResetRecordNum()
		return nil
	case filerecord.FieldSha1Sum:
		m.ResetSha1Sum()
		return nil
	case filerecord.FieldState:
		m.ResetState()
		return nil
	case filerecord.FieldRemark:
		m.ResetRemark()
		return nil
	}
	return fmt.Errorf("unknown FileRecord field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FileRecordMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FileRecordMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FileRecordMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FileRecordMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FileRecordMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FileRecordMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FileRecordMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FileRecord unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FileRecordMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FileRecord edge %s", name)
}

// MqueueMutation represents an operation that mutates the Mqueue nodes in the graph.
type MqueueMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	name          *string
	remark        *string
	topic_name    *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Mqueue, error)
	predicates    []predicate.Mqueue
}

var _ ent.Mutation = (*MqueueMutation)(nil)

// mqueueOption allows management of the mutation configuration using functional options.
type mqueueOption func(*MqueueMutation)

// newMqueueMutation creates new mutation for the Mqueue entity.
func newMqueueMutation(c config, op Op, opts ...mqueueOption) *MqueueMutation {
	m := &MqueueMutation{
		config:        c,
		op:            op,
		typ:           TypeMqueue,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMqueueID sets the ID field of the mutation.
func withMqueueID(id uuid.UUID) mqueueOption {
	return func(m *MqueueMutation) {
		var (
			err   error
			once  sync.Once
			value *Mqueue
		)
		m.oldValue = func(ctx context.Context) (*Mqueue, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Mqueue.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMqueue sets the old Mqueue of the mutation.
func withMqueue(node *Mqueue) mqueueOption {
	return func(m *MqueueMutation) {
		m.oldValue = func(context.Context) (*Mqueue, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MqueueMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MqueueMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Mqueue entities.
func (m *MqueueMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MqueueMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MqueueMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Mqueue.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *MqueueMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MqueueMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Mqueue entity.
// If the Mqueue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MqueueMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *MqueueMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *MqueueMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MqueueMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MqueueMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MqueueMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Mqueue entity.
// If the Mqueue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MqueueMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *MqueueMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *MqueueMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MqueueMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *MqueueMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *MqueueMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Mqueue entity.
// If the Mqueue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MqueueMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *MqueueMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *MqueueMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *MqueueMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetName sets the "name" field.
func (m *MqueueMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MqueueMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Mqueue entity.
// If the Mqueue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MqueueMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MqueueMutation) ResetName() {
	m.name = nil
}

// SetRemark sets the "remark" field.
func (m *MqueueMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *MqueueMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Mqueue entity.
// If the Mqueue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MqueueMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *MqueueMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[mqueue.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *MqueueMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[mqueue.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *MqueueMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, mqueue.FieldRemark)
}

// SetTopicName sets the "topic_name" field.
func (m *MqueueMutation) SetTopicName(s string) {
	m.topic_name = &s
}

// TopicName returns the value of the "topic_name" field in the mutation.
func (m *MqueueMutation) TopicName() (r string, exists bool) {
	v := m.topic_name
	if v == nil {
		return
	}
	return *v, true
}

// OldTopicName returns the old "topic_name" field's value of the Mqueue entity.
// If the Mqueue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MqueueMutation) OldTopicName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTopicName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTopicName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTopicName: %w", err)
	}
	return oldValue.TopicName, nil
}

// ResetTopicName resets all changes to the "topic_name" field.
func (m *MqueueMutation) ResetTopicName() {
	m.topic_name = nil
}

// Where appends a list predicates to the MqueueMutation builder.
func (m *MqueueMutation) Where(ps ...predicate.Mqueue) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MqueueMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Mqueue).
func (m *MqueueMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MqueueMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, mqueue.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, mqueue.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, mqueue.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, mqueue.FieldName)
	}
	if m.remark != nil {
		fields = append(fields, mqueue.FieldRemark)
	}
	if m.topic_name != nil {
		fields = append(fields, mqueue.FieldTopicName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MqueueMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mqueue.FieldCreatedAt:
		return m.CreatedAt()
	case mqueue.FieldUpdatedAt:
		return m.UpdatedAt()
	case mqueue.FieldDeletedAt:
		return m.DeletedAt()
	case mqueue.FieldName:
		return m.Name()
	case mqueue.FieldRemark:
		return m.Remark()
	case mqueue.FieldTopicName:
		return m.TopicName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MqueueMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mqueue.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case mqueue.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case mqueue.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case mqueue.FieldName:
		return m.OldName(ctx)
	case mqueue.FieldRemark:
		return m.OldRemark(ctx)
	case mqueue.FieldTopicName:
		return m.OldTopicName(ctx)
	}
	return nil, fmt.Errorf("unknown Mqueue field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MqueueMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mqueue.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case mqueue.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case mqueue.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case mqueue.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case mqueue.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case mqueue.FieldTopicName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTopicName(v)
		return nil
	}
	return fmt.Errorf("unknown Mqueue field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MqueueMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, mqueue.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, mqueue.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, mqueue.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MqueueMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case mqueue.FieldCreatedAt:
		return m.AddedCreatedAt()
	case mqueue.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case mqueue.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MqueueMutation) AddField(name string, value ent.Value) error {
	switch name {
	case mqueue.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case mqueue.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case mqueue.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Mqueue numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MqueueMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(mqueue.FieldRemark) {
		fields = append(fields, mqueue.FieldRemark)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MqueueMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MqueueMutation) ClearField(name string) error {
	switch name {
	case mqueue.FieldRemark:
		m.ClearRemark()
		return nil
	}
	return fmt.Errorf("unknown Mqueue nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MqueueMutation) ResetField(name string) error {
	switch name {
	case mqueue.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case mqueue.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case mqueue.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case mqueue.FieldName:
		m.ResetName()
		return nil
	case mqueue.FieldRemark:
		m.ResetRemark()
		return nil
	case mqueue.FieldTopicName:
		m.ResetTopicName()
		return nil
	}
	return fmt.Errorf("unknown Mqueue field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MqueueMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MqueueMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MqueueMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MqueueMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MqueueMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MqueueMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MqueueMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Mqueue unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MqueueMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Mqueue edge %s", name)
}

// TopicMutation represents an operation that mutates the Topic nodes in the graph.
type TopicMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *uint32
	addcreated_at *int32
	updated_at    *uint32
	addupdated_at *int32
	deleted_at    *uint32
	adddeleted_at *int32
	topic_id      *string
	name          *string
	contract      *string
	_type         *string
	change_able   *bool
	remark        *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Topic, error)
	predicates    []predicate.Topic
}

var _ ent.Mutation = (*TopicMutation)(nil)

// topicOption allows management of the mutation configuration using functional options.
type topicOption func(*TopicMutation)

// newTopicMutation creates new mutation for the Topic entity.
func newTopicMutation(c config, op Op, opts ...topicOption) *TopicMutation {
	m := &TopicMutation{
		config:        c,
		op:            op,
		typ:           TypeTopic,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTopicID sets the ID field of the mutation.
func withTopicID(id uuid.UUID) topicOption {
	return func(m *TopicMutation) {
		var (
			err   error
			once  sync.Once
			value *Topic
		)
		m.oldValue = func(ctx context.Context) (*Topic, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Topic.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTopic sets the old Topic of the mutation.
func withTopic(node *Topic) topicOption {
	return func(m *TopicMutation) {
		m.oldValue = func(context.Context) (*Topic, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TopicMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TopicMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Topic entities.
func (m *TopicMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TopicMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TopicMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Topic.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *TopicMutation) SetCreatedAt(u uint32) {
	m.created_at = &u
	m.addcreated_at = nil
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TopicMutation) CreatedAt() (r uint32, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldCreatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// AddCreatedAt adds u to the "created_at" field.
func (m *TopicMutation) AddCreatedAt(u int32) {
	if m.addcreated_at != nil {
		*m.addcreated_at += u
	} else {
		m.addcreated_at = &u
	}
}

// AddedCreatedAt returns the value that was added to the "created_at" field in this mutation.
func (m *TopicMutation) AddedCreatedAt() (r int32, exists bool) {
	v := m.addcreated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TopicMutation) ResetCreatedAt() {
	m.created_at = nil
	m.addcreated_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TopicMutation) SetUpdatedAt(u uint32) {
	m.updated_at = &u
	m.addupdated_at = nil
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TopicMutation) UpdatedAt() (r uint32, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldUpdatedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// AddUpdatedAt adds u to the "updated_at" field.
func (m *TopicMutation) AddUpdatedAt(u int32) {
	if m.addupdated_at != nil {
		*m.addupdated_at += u
	} else {
		m.addupdated_at = &u
	}
}

// AddedUpdatedAt returns the value that was added to the "updated_at" field in this mutation.
func (m *TopicMutation) AddedUpdatedAt() (r int32, exists bool) {
	v := m.addupdated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TopicMutation) ResetUpdatedAt() {
	m.updated_at = nil
	m.addupdated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *TopicMutation) SetDeletedAt(u uint32) {
	m.deleted_at = &u
	m.adddeleted_at = nil
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *TopicMutation) DeletedAt() (r uint32, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldDeletedAt(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// AddDeletedAt adds u to the "deleted_at" field.
func (m *TopicMutation) AddDeletedAt(u int32) {
	if m.adddeleted_at != nil {
		*m.adddeleted_at += u
	} else {
		m.adddeleted_at = &u
	}
}

// AddedDeletedAt returns the value that was added to the "deleted_at" field in this mutation.
func (m *TopicMutation) AddedDeletedAt() (r int32, exists bool) {
	v := m.adddeleted_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *TopicMutation) ResetDeletedAt() {
	m.deleted_at = nil
	m.adddeleted_at = nil
}

// SetTopicID sets the "topic_id" field.
func (m *TopicMutation) SetTopicID(s string) {
	m.topic_id = &s
}

// TopicID returns the value of the "topic_id" field in the mutation.
func (m *TopicMutation) TopicID() (r string, exists bool) {
	v := m.topic_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTopicID returns the old "topic_id" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldTopicID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTopicID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTopicID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTopicID: %w", err)
	}
	return oldValue.TopicID, nil
}

// ResetTopicID resets all changes to the "topic_id" field.
func (m *TopicMutation) ResetTopicID() {
	m.topic_id = nil
}

// SetName sets the "name" field.
func (m *TopicMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TopicMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TopicMutation) ResetName() {
	m.name = nil
}

// SetContract sets the "contract" field.
func (m *TopicMutation) SetContract(s string) {
	m.contract = &s
}

// Contract returns the value of the "contract" field in the mutation.
func (m *TopicMutation) Contract() (r string, exists bool) {
	v := m.contract
	if v == nil {
		return
	}
	return *v, true
}

// OldContract returns the old "contract" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldContract(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContract is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContract requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContract: %w", err)
	}
	return oldValue.Contract, nil
}

// ResetContract resets all changes to the "contract" field.
func (m *TopicMutation) ResetContract() {
	m.contract = nil
}

// SetType sets the "type" field.
func (m *TopicMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *TopicMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *TopicMutation) ResetType() {
	m._type = nil
}

// SetChangeAble sets the "change_able" field.
func (m *TopicMutation) SetChangeAble(b bool) {
	m.change_able = &b
}

// ChangeAble returns the value of the "change_able" field in the mutation.
func (m *TopicMutation) ChangeAble() (r bool, exists bool) {
	v := m.change_able
	if v == nil {
		return
	}
	return *v, true
}

// OldChangeAble returns the old "change_able" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldChangeAble(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChangeAble is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChangeAble requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChangeAble: %w", err)
	}
	return oldValue.ChangeAble, nil
}

// ResetChangeAble resets all changes to the "change_able" field.
func (m *TopicMutation) ResetChangeAble() {
	m.change_able = nil
}

// SetRemark sets the "remark" field.
func (m *TopicMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *TopicMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Topic entity.
// If the Topic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TopicMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRemark: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *TopicMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[topic.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *TopicMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[topic.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *TopicMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, topic.FieldRemark)
}

// Where appends a list predicates to the TopicMutation builder.
func (m *TopicMutation) Where(ps ...predicate.Topic) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TopicMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Topic).
func (m *TopicMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TopicMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, topic.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, topic.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, topic.FieldDeletedAt)
	}
	if m.topic_id != nil {
		fields = append(fields, topic.FieldTopicID)
	}
	if m.name != nil {
		fields = append(fields, topic.FieldName)
	}
	if m.contract != nil {
		fields = append(fields, topic.FieldContract)
	}
	if m._type != nil {
		fields = append(fields, topic.FieldType)
	}
	if m.change_able != nil {
		fields = append(fields, topic.FieldChangeAble)
	}
	if m.remark != nil {
		fields = append(fields, topic.FieldRemark)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TopicMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case topic.FieldCreatedAt:
		return m.CreatedAt()
	case topic.FieldUpdatedAt:
		return m.UpdatedAt()
	case topic.FieldDeletedAt:
		return m.DeletedAt()
	case topic.FieldTopicID:
		return m.TopicID()
	case topic.FieldName:
		return m.Name()
	case topic.FieldContract:
		return m.Contract()
	case topic.FieldType:
		return m.GetType()
	case topic.FieldChangeAble:
		return m.ChangeAble()
	case topic.FieldRemark:
		return m.Remark()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TopicMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case topic.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case topic.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case topic.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case topic.FieldTopicID:
		return m.OldTopicID(ctx)
	case topic.FieldName:
		return m.OldName(ctx)
	case topic.FieldContract:
		return m.OldContract(ctx)
	case topic.FieldType:
		return m.OldType(ctx)
	case topic.FieldChangeAble:
		return m.OldChangeAble(ctx)
	case topic.FieldRemark:
		return m.OldRemark(ctx)
	}
	return nil, fmt.Errorf("unknown Topic field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TopicMutation) SetField(name string, value ent.Value) error {
	switch name {
	case topic.FieldCreatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case topic.FieldUpdatedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case topic.FieldDeletedAt:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case topic.FieldTopicID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTopicID(v)
		return nil
	case topic.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case topic.FieldContract:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContract(v)
		return nil
	case topic.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case topic.FieldChangeAble:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChangeAble(v)
		return nil
	case topic.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRemark(v)
		return nil
	}
	return fmt.Errorf("unknown Topic field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TopicMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_at != nil {
		fields = append(fields, topic.FieldCreatedAt)
	}
	if m.addupdated_at != nil {
		fields = append(fields, topic.FieldUpdatedAt)
	}
	if m.adddeleted_at != nil {
		fields = append(fields, topic.FieldDeletedAt)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TopicMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case topic.FieldCreatedAt:
		return m.AddedCreatedAt()
	case topic.FieldUpdatedAt:
		return m.AddedUpdatedAt()
	case topic.FieldDeletedAt:
		return m.AddedDeletedAt()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TopicMutation) AddField(name string, value ent.Value) error {
	switch name {
	case topic.FieldCreatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedAt(v)
		return nil
	case topic.FieldUpdatedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUpdatedAt(v)
		return nil
	case topic.FieldDeletedAt:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Topic numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TopicMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(topic.FieldRemark) {
		fields = append(fields, topic.FieldRemark)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TopicMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TopicMutation) ClearField(name string) error {
	switch name {
	case topic.FieldRemark:
		m.ClearRemark()
		return nil
	}
	return fmt.Errorf("unknown Topic nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TopicMutation) ResetField(name string) error {
	switch name {
	case topic.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case topic.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case topic.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case topic.FieldTopicID:
		m.ResetTopicID()
		return nil
	case topic.FieldName:
		m.ResetName()
		return nil
	case topic.FieldContract:
		m.ResetContract()
		return nil
	case topic.FieldType:
		m.ResetType()
		return nil
	case topic.FieldChangeAble:
		m.ResetChangeAble()
		return nil
	case topic.FieldRemark:
		m.ResetRemark()
		return nil
	}
	return fmt.Errorf("unknown Topic field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TopicMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TopicMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TopicMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TopicMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TopicMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TopicMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TopicMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Topic unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TopicMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Topic edge %s", name)
}
