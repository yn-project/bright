// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"yun.tea/block/bright/datafin/pkg/db/ent/topic"
)

// TopicCreate is the builder for creating a Topic entity.
type TopicCreate struct {
	config
	mutation *TopicMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tc *TopicCreate) SetCreatedAt(u uint32) *TopicCreate {
	tc.mutation.SetCreatedAt(u)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TopicCreate) SetNillableCreatedAt(u *uint32) *TopicCreate {
	if u != nil {
		tc.SetCreatedAt(*u)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TopicCreate) SetUpdatedAt(u uint32) *TopicCreate {
	tc.mutation.SetUpdatedAt(u)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TopicCreate) SetNillableUpdatedAt(u *uint32) *TopicCreate {
	if u != nil {
		tc.SetUpdatedAt(*u)
	}
	return tc
}

// SetDeletedAt sets the "deleted_at" field.
func (tc *TopicCreate) SetDeletedAt(u uint32) *TopicCreate {
	tc.mutation.SetDeletedAt(u)
	return tc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tc *TopicCreate) SetNillableDeletedAt(u *uint32) *TopicCreate {
	if u != nil {
		tc.SetDeletedAt(*u)
	}
	return tc
}

// SetTopicID sets the "topic_id" field.
func (tc *TopicCreate) SetTopicID(s string) *TopicCreate {
	tc.mutation.SetTopicID(s)
	return tc
}

// SetName sets the "name" field.
func (tc *TopicCreate) SetName(s string) *TopicCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetContract sets the "contract" field.
func (tc *TopicCreate) SetContract(s string) *TopicCreate {
	tc.mutation.SetContract(s)
	return tc
}

// SetType sets the "type" field.
func (tc *TopicCreate) SetType(s string) *TopicCreate {
	tc.mutation.SetType(s)
	return tc
}

// SetChangeAble sets the "change_able" field.
func (tc *TopicCreate) SetChangeAble(b bool) *TopicCreate {
	tc.mutation.SetChangeAble(b)
	return tc
}

// SetOnChain sets the "on_chain" field.
func (tc *TopicCreate) SetOnChain(b bool) *TopicCreate {
	tc.mutation.SetOnChain(b)
	return tc
}

// SetRemark sets the "remark" field.
func (tc *TopicCreate) SetRemark(s string) *TopicCreate {
	tc.mutation.SetRemark(s)
	return tc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (tc *TopicCreate) SetNillableRemark(s *string) *TopicCreate {
	if s != nil {
		tc.SetRemark(*s)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TopicCreate) SetID(u uuid.UUID) *TopicCreate {
	tc.mutation.SetID(u)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TopicCreate) SetNillableID(u *uuid.UUID) *TopicCreate {
	if u != nil {
		tc.SetID(*u)
	}
	return tc
}

// Mutation returns the TopicMutation object of the builder.
func (tc *TopicCreate) Mutation() *TopicMutation {
	return tc.mutation
}

// Save creates the Topic in the database.
func (tc *TopicCreate) Save(ctx context.Context) (*Topic, error) {
	var (
		err  error
		node *Topic
	)
	if err := tc.defaults(); err != nil {
		return nil, err
	}
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TopicMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Topic)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TopicMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TopicCreate) SaveX(ctx context.Context) *Topic {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TopicCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TopicCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TopicCreate) defaults() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		if topic.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized topic.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := topic.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		if topic.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized topic.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := topic.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.DeletedAt(); !ok {
		if topic.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized topic.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := topic.DefaultDeletedAt()
		tc.mutation.SetDeletedAt(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		if topic.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized topic.DefaultID (forgotten import ent/runtime?)")
		}
		v := topic.DefaultID()
		tc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tc *TopicCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Topic.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Topic.updated_at"`)}
	}
	if _, ok := tc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Topic.deleted_at"`)}
	}
	if _, ok := tc.mutation.TopicID(); !ok {
		return &ValidationError{Name: "topic_id", err: errors.New(`ent: missing required field "Topic.topic_id"`)}
	}
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Topic.name"`)}
	}
	if _, ok := tc.mutation.Contract(); !ok {
		return &ValidationError{Name: "contract", err: errors.New(`ent: missing required field "Topic.contract"`)}
	}
	if _, ok := tc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Topic.type"`)}
	}
	if _, ok := tc.mutation.ChangeAble(); !ok {
		return &ValidationError{Name: "change_able", err: errors.New(`ent: missing required field "Topic.change_able"`)}
	}
	if _, ok := tc.mutation.OnChain(); !ok {
		return &ValidationError{Name: "on_chain", err: errors.New(`ent: missing required field "Topic.on_chain"`)}
	}
	return nil
}

func (tc *TopicCreate) sqlSave(ctx context.Context) (*Topic, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (tc *TopicCreate) createSpec() (*Topic, *sqlgraph.CreateSpec) {
	var (
		_node = &Topic{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: topic.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: topic.FieldID,
			},
		}
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topic.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topic.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: topic.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := tc.mutation.TopicID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topic.FieldTopicID,
		})
		_node.TopicID = value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topic.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tc.mutation.Contract(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topic.FieldContract,
		})
		_node.Contract = value
	}
	if value, ok := tc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topic.FieldType,
		})
		_node.Type = value
	}
	if value, ok := tc.mutation.ChangeAble(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: topic.FieldChangeAble,
		})
		_node.ChangeAble = value
	}
	if value, ok := tc.mutation.OnChain(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: topic.FieldOnChain,
		})
		_node.OnChain = value
	}
	if value, ok := tc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: topic.FieldRemark,
		})
		_node.Remark = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Topic.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TopicUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tc *TopicCreate) OnConflict(opts ...sql.ConflictOption) *TopicUpsertOne {
	tc.conflict = opts
	return &TopicUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Topic.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TopicCreate) OnConflictColumns(columns ...string) *TopicUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TopicUpsertOne{
		create: tc,
	}
}

type (
	// TopicUpsertOne is the builder for "upsert"-ing
	//  one Topic node.
	TopicUpsertOne struct {
		create *TopicCreate
	}

	// TopicUpsert is the "OnConflict" setter.
	TopicUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *TopicUpsert) SetCreatedAt(v uint32) *TopicUpsert {
	u.Set(topic.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TopicUpsert) UpdateCreatedAt() *TopicUpsert {
	u.SetExcluded(topic.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TopicUpsert) AddCreatedAt(v uint32) *TopicUpsert {
	u.Add(topic.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TopicUpsert) SetUpdatedAt(v uint32) *TopicUpsert {
	u.Set(topic.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TopicUpsert) UpdateUpdatedAt() *TopicUpsert {
	u.SetExcluded(topic.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TopicUpsert) AddUpdatedAt(v uint32) *TopicUpsert {
	u.Add(topic.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TopicUpsert) SetDeletedAt(v uint32) *TopicUpsert {
	u.Set(topic.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TopicUpsert) UpdateDeletedAt() *TopicUpsert {
	u.SetExcluded(topic.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TopicUpsert) AddDeletedAt(v uint32) *TopicUpsert {
	u.Add(topic.FieldDeletedAt, v)
	return u
}

// SetTopicID sets the "topic_id" field.
func (u *TopicUpsert) SetTopicID(v string) *TopicUpsert {
	u.Set(topic.FieldTopicID, v)
	return u
}

// UpdateTopicID sets the "topic_id" field to the value that was provided on create.
func (u *TopicUpsert) UpdateTopicID() *TopicUpsert {
	u.SetExcluded(topic.FieldTopicID)
	return u
}

// SetName sets the "name" field.
func (u *TopicUpsert) SetName(v string) *TopicUpsert {
	u.Set(topic.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TopicUpsert) UpdateName() *TopicUpsert {
	u.SetExcluded(topic.FieldName)
	return u
}

// SetContract sets the "contract" field.
func (u *TopicUpsert) SetContract(v string) *TopicUpsert {
	u.Set(topic.FieldContract, v)
	return u
}

// UpdateContract sets the "contract" field to the value that was provided on create.
func (u *TopicUpsert) UpdateContract() *TopicUpsert {
	u.SetExcluded(topic.FieldContract)
	return u
}

// SetType sets the "type" field.
func (u *TopicUpsert) SetType(v string) *TopicUpsert {
	u.Set(topic.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TopicUpsert) UpdateType() *TopicUpsert {
	u.SetExcluded(topic.FieldType)
	return u
}

// SetChangeAble sets the "change_able" field.
func (u *TopicUpsert) SetChangeAble(v bool) *TopicUpsert {
	u.Set(topic.FieldChangeAble, v)
	return u
}

// UpdateChangeAble sets the "change_able" field to the value that was provided on create.
func (u *TopicUpsert) UpdateChangeAble() *TopicUpsert {
	u.SetExcluded(topic.FieldChangeAble)
	return u
}

// SetOnChain sets the "on_chain" field.
func (u *TopicUpsert) SetOnChain(v bool) *TopicUpsert {
	u.Set(topic.FieldOnChain, v)
	return u
}

// UpdateOnChain sets the "on_chain" field to the value that was provided on create.
func (u *TopicUpsert) UpdateOnChain() *TopicUpsert {
	u.SetExcluded(topic.FieldOnChain)
	return u
}

// SetRemark sets the "remark" field.
func (u *TopicUpsert) SetRemark(v string) *TopicUpsert {
	u.Set(topic.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TopicUpsert) UpdateRemark() *TopicUpsert {
	u.SetExcluded(topic.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *TopicUpsert) ClearRemark() *TopicUpsert {
	u.SetNull(topic.FieldRemark)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Topic.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(topic.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TopicUpsertOne) UpdateNewValues() *TopicUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(topic.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Topic.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TopicUpsertOne) Ignore() *TopicUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TopicUpsertOne) DoNothing() *TopicUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TopicCreate.OnConflict
// documentation for more info.
func (u *TopicUpsertOne) Update(set func(*TopicUpsert)) *TopicUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TopicUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TopicUpsertOne) SetCreatedAt(v uint32) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TopicUpsertOne) AddCreatedAt(v uint32) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TopicUpsertOne) UpdateCreatedAt() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TopicUpsertOne) SetUpdatedAt(v uint32) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TopicUpsertOne) AddUpdatedAt(v uint32) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TopicUpsertOne) UpdateUpdatedAt() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TopicUpsertOne) SetDeletedAt(v uint32) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TopicUpsertOne) AddDeletedAt(v uint32) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TopicUpsertOne) UpdateDeletedAt() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetTopicID sets the "topic_id" field.
func (u *TopicUpsertOne) SetTopicID(v string) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.SetTopicID(v)
	})
}

// UpdateTopicID sets the "topic_id" field to the value that was provided on create.
func (u *TopicUpsertOne) UpdateTopicID() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateTopicID()
	})
}

// SetName sets the "name" field.
func (u *TopicUpsertOne) SetName(v string) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TopicUpsertOne) UpdateName() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateName()
	})
}

// SetContract sets the "contract" field.
func (u *TopicUpsertOne) SetContract(v string) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.SetContract(v)
	})
}

// UpdateContract sets the "contract" field to the value that was provided on create.
func (u *TopicUpsertOne) UpdateContract() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateContract()
	})
}

// SetType sets the "type" field.
func (u *TopicUpsertOne) SetType(v string) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TopicUpsertOne) UpdateType() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateType()
	})
}

// SetChangeAble sets the "change_able" field.
func (u *TopicUpsertOne) SetChangeAble(v bool) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.SetChangeAble(v)
	})
}

// UpdateChangeAble sets the "change_able" field to the value that was provided on create.
func (u *TopicUpsertOne) UpdateChangeAble() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateChangeAble()
	})
}

// SetOnChain sets the "on_chain" field.
func (u *TopicUpsertOne) SetOnChain(v bool) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.SetOnChain(v)
	})
}

// UpdateOnChain sets the "on_chain" field to the value that was provided on create.
func (u *TopicUpsertOne) UpdateOnChain() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateOnChain()
	})
}

// SetRemark sets the "remark" field.
func (u *TopicUpsertOne) SetRemark(v string) *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TopicUpsertOne) UpdateRemark() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *TopicUpsertOne) ClearRemark() *TopicUpsertOne {
	return u.Update(func(s *TopicUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *TopicUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TopicCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TopicUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TopicUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TopicUpsertOne.ID is not supported by MySQL driver. Use TopicUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TopicUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TopicCreateBulk is the builder for creating many Topic entities in bulk.
type TopicCreateBulk struct {
	config
	builders []*TopicCreate
	conflict []sql.ConflictOption
}

// Save creates the Topic entities in the database.
func (tcb *TopicCreateBulk) Save(ctx context.Context) ([]*Topic, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Topic, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TopicMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TopicCreateBulk) SaveX(ctx context.Context) []*Topic {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TopicCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TopicCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Topic.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TopicUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tcb *TopicCreateBulk) OnConflict(opts ...sql.ConflictOption) *TopicUpsertBulk {
	tcb.conflict = opts
	return &TopicUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Topic.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TopicCreateBulk) OnConflictColumns(columns ...string) *TopicUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TopicUpsertBulk{
		create: tcb,
	}
}

// TopicUpsertBulk is the builder for "upsert"-ing
// a bulk of Topic nodes.
type TopicUpsertBulk struct {
	create *TopicCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Topic.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(topic.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TopicUpsertBulk) UpdateNewValues() *TopicUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(topic.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Topic.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TopicUpsertBulk) Ignore() *TopicUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TopicUpsertBulk) DoNothing() *TopicUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TopicCreateBulk.OnConflict
// documentation for more info.
func (u *TopicUpsertBulk) Update(set func(*TopicUpsert)) *TopicUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TopicUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TopicUpsertBulk) SetCreatedAt(v uint32) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TopicUpsertBulk) AddCreatedAt(v uint32) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TopicUpsertBulk) UpdateCreatedAt() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TopicUpsertBulk) SetUpdatedAt(v uint32) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TopicUpsertBulk) AddUpdatedAt(v uint32) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TopicUpsertBulk) UpdateUpdatedAt() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TopicUpsertBulk) SetDeletedAt(v uint32) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TopicUpsertBulk) AddDeletedAt(v uint32) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TopicUpsertBulk) UpdateDeletedAt() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetTopicID sets the "topic_id" field.
func (u *TopicUpsertBulk) SetTopicID(v string) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.SetTopicID(v)
	})
}

// UpdateTopicID sets the "topic_id" field to the value that was provided on create.
func (u *TopicUpsertBulk) UpdateTopicID() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateTopicID()
	})
}

// SetName sets the "name" field.
func (u *TopicUpsertBulk) SetName(v string) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TopicUpsertBulk) UpdateName() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateName()
	})
}

// SetContract sets the "contract" field.
func (u *TopicUpsertBulk) SetContract(v string) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.SetContract(v)
	})
}

// UpdateContract sets the "contract" field to the value that was provided on create.
func (u *TopicUpsertBulk) UpdateContract() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateContract()
	})
}

// SetType sets the "type" field.
func (u *TopicUpsertBulk) SetType(v string) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TopicUpsertBulk) UpdateType() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateType()
	})
}

// SetChangeAble sets the "change_able" field.
func (u *TopicUpsertBulk) SetChangeAble(v bool) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.SetChangeAble(v)
	})
}

// UpdateChangeAble sets the "change_able" field to the value that was provided on create.
func (u *TopicUpsertBulk) UpdateChangeAble() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateChangeAble()
	})
}

// SetOnChain sets the "on_chain" field.
func (u *TopicUpsertBulk) SetOnChain(v bool) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.SetOnChain(v)
	})
}

// UpdateOnChain sets the "on_chain" field to the value that was provided on create.
func (u *TopicUpsertBulk) UpdateOnChain() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateOnChain()
	})
}

// SetRemark sets the "remark" field.
func (u *TopicUpsertBulk) SetRemark(v string) *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *TopicUpsertBulk) UpdateRemark() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *TopicUpsertBulk) ClearRemark() *TopicUpsertBulk {
	return u.Update(func(s *TopicUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *TopicUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TopicCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TopicCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TopicUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
