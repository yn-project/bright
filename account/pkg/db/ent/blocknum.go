// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"yun.tea/block/bright/account/pkg/db/ent/blocknum"
)

// BlockNum is the model entity for the BlockNum schema.
type BlockNum struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// TimeAt holds the value of the "time_at" field.
	TimeAt uint32 `json:"time_at,omitempty"`
	// Height holds the value of the "height" field.
	Height uint64 `json:"height,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BlockNum) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case blocknum.FieldID, blocknum.FieldCreatedAt, blocknum.FieldUpdatedAt, blocknum.FieldDeletedAt, blocknum.FieldTimeAt, blocknum.FieldHeight:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type BlockNum", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BlockNum fields.
func (bn *BlockNum) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blocknum.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bn.ID = uint32(value.Int64)
		case blocknum.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bn.CreatedAt = uint32(value.Int64)
			}
		case blocknum.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				bn.UpdatedAt = uint32(value.Int64)
			}
		case blocknum.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				bn.DeletedAt = uint32(value.Int64)
			}
		case blocknum.FieldTimeAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time_at", values[i])
			} else if value.Valid {
				bn.TimeAt = uint32(value.Int64)
			}
		case blocknum.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				bn.Height = uint64(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this BlockNum.
// Note that you need to call BlockNum.Unwrap() before calling this method if this BlockNum
// was returned from a transaction, and the transaction was committed or rolled back.
func (bn *BlockNum) Update() *BlockNumUpdateOne {
	return (&BlockNumClient{config: bn.config}).UpdateOne(bn)
}

// Unwrap unwraps the BlockNum entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bn *BlockNum) Unwrap() *BlockNum {
	_tx, ok := bn.config.driver.(*txDriver)
	if !ok {
		panic("ent: BlockNum is not a transactional entity")
	}
	bn.config.driver = _tx.drv
	return bn
}

// String implements the fmt.Stringer.
func (bn *BlockNum) String() string {
	var builder strings.Builder
	builder.WriteString("BlockNum(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bn.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", bn.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", bn.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", bn.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("time_at=")
	builder.WriteString(fmt.Sprintf("%v", bn.TimeAt))
	builder.WriteString(", ")
	builder.WriteString("height=")
	builder.WriteString(fmt.Sprintf("%v", bn.Height))
	builder.WriteByte(')')
	return builder.String()
}

// BlockNums is a parsable slice of BlockNum.
type BlockNums []*BlockNum

func (bn BlockNums) config(cfg config) {
	for _i := range bn {
		bn[_i].config = cfg
	}
}
