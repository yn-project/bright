// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"yun.tea/block/bright/account/pkg/db/ent/predicate"
	"yun.tea/block/bright/account/pkg/db/ent/txnum"
)

// TxNumUpdate is the builder for updating TxNum entities.
type TxNumUpdate struct {
	config
	hooks     []Hook
	mutation  *TxNumMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TxNumUpdate builder.
func (tnu *TxNumUpdate) Where(ps ...predicate.TxNum) *TxNumUpdate {
	tnu.mutation.Where(ps...)
	return tnu
}

// SetCreatedAt sets the "created_at" field.
func (tnu *TxNumUpdate) SetCreatedAt(u uint32) *TxNumUpdate {
	tnu.mutation.ResetCreatedAt()
	tnu.mutation.SetCreatedAt(u)
	return tnu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tnu *TxNumUpdate) SetNillableCreatedAt(u *uint32) *TxNumUpdate {
	if u != nil {
		tnu.SetCreatedAt(*u)
	}
	return tnu
}

// AddCreatedAt adds u to the "created_at" field.
func (tnu *TxNumUpdate) AddCreatedAt(u int32) *TxNumUpdate {
	tnu.mutation.AddCreatedAt(u)
	return tnu
}

// SetUpdatedAt sets the "updated_at" field.
func (tnu *TxNumUpdate) SetUpdatedAt(u uint32) *TxNumUpdate {
	tnu.mutation.ResetUpdatedAt()
	tnu.mutation.SetUpdatedAt(u)
	return tnu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tnu *TxNumUpdate) AddUpdatedAt(u int32) *TxNumUpdate {
	tnu.mutation.AddUpdatedAt(u)
	return tnu
}

// SetDeletedAt sets the "deleted_at" field.
func (tnu *TxNumUpdate) SetDeletedAt(u uint32) *TxNumUpdate {
	tnu.mutation.ResetDeletedAt()
	tnu.mutation.SetDeletedAt(u)
	return tnu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tnu *TxNumUpdate) SetNillableDeletedAt(u *uint32) *TxNumUpdate {
	if u != nil {
		tnu.SetDeletedAt(*u)
	}
	return tnu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tnu *TxNumUpdate) AddDeletedAt(u int32) *TxNumUpdate {
	tnu.mutation.AddDeletedAt(u)
	return tnu
}

// SetTimeAt sets the "time_at" field.
func (tnu *TxNumUpdate) SetTimeAt(u uint32) *TxNumUpdate {
	tnu.mutation.ResetTimeAt()
	tnu.mutation.SetTimeAt(u)
	return tnu
}

// AddTimeAt adds u to the "time_at" field.
func (tnu *TxNumUpdate) AddTimeAt(u int32) *TxNumUpdate {
	tnu.mutation.AddTimeAt(u)
	return tnu
}

// SetNum sets the "num" field.
func (tnu *TxNumUpdate) SetNum(u uint32) *TxNumUpdate {
	tnu.mutation.ResetNum()
	tnu.mutation.SetNum(u)
	return tnu
}

// AddNum adds u to the "num" field.
func (tnu *TxNumUpdate) AddNum(u int32) *TxNumUpdate {
	tnu.mutation.AddNum(u)
	return tnu
}

// Mutation returns the TxNumMutation object of the builder.
func (tnu *TxNumUpdate) Mutation() *TxNumMutation {
	return tnu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tnu *TxNumUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := tnu.defaults(); err != nil {
		return 0, err
	}
	if len(tnu.hooks) == 0 {
		affected, err = tnu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TxNumMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tnu.mutation = mutation
			affected, err = tnu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tnu.hooks) - 1; i >= 0; i-- {
			if tnu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tnu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tnu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tnu *TxNumUpdate) SaveX(ctx context.Context) int {
	affected, err := tnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tnu *TxNumUpdate) Exec(ctx context.Context) error {
	_, err := tnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tnu *TxNumUpdate) ExecX(ctx context.Context) {
	if err := tnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tnu *TxNumUpdate) defaults() error {
	if _, ok := tnu.mutation.UpdatedAt(); !ok {
		if txnum.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized txnum.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := txnum.UpdateDefaultUpdatedAt()
		tnu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tnu *TxNumUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TxNumUpdate {
	tnu.modifiers = append(tnu.modifiers, modifiers...)
	return tnu
}

func (tnu *TxNumUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   txnum.Table,
			Columns: txnum.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: txnum.FieldID,
			},
		},
	}
	if ps := tnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tnu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldCreatedAt,
		})
	}
	if value, ok := tnu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldCreatedAt,
		})
	}
	if value, ok := tnu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldUpdatedAt,
		})
	}
	if value, ok := tnu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldUpdatedAt,
		})
	}
	if value, ok := tnu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldDeletedAt,
		})
	}
	if value, ok := tnu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldDeletedAt,
		})
	}
	if value, ok := tnu.mutation.TimeAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldTimeAt,
		})
	}
	if value, ok := tnu.mutation.AddedTimeAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldTimeAt,
		})
	}
	if value, ok := tnu.mutation.Num(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldNum,
		})
	}
	if value, ok := tnu.mutation.AddedNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldNum,
		})
	}
	_spec.Modifiers = tnu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, tnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{txnum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TxNumUpdateOne is the builder for updating a single TxNum entity.
type TxNumUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TxNumMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (tnuo *TxNumUpdateOne) SetCreatedAt(u uint32) *TxNumUpdateOne {
	tnuo.mutation.ResetCreatedAt()
	tnuo.mutation.SetCreatedAt(u)
	return tnuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tnuo *TxNumUpdateOne) SetNillableCreatedAt(u *uint32) *TxNumUpdateOne {
	if u != nil {
		tnuo.SetCreatedAt(*u)
	}
	return tnuo
}

// AddCreatedAt adds u to the "created_at" field.
func (tnuo *TxNumUpdateOne) AddCreatedAt(u int32) *TxNumUpdateOne {
	tnuo.mutation.AddCreatedAt(u)
	return tnuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tnuo *TxNumUpdateOne) SetUpdatedAt(u uint32) *TxNumUpdateOne {
	tnuo.mutation.ResetUpdatedAt()
	tnuo.mutation.SetUpdatedAt(u)
	return tnuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (tnuo *TxNumUpdateOne) AddUpdatedAt(u int32) *TxNumUpdateOne {
	tnuo.mutation.AddUpdatedAt(u)
	return tnuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tnuo *TxNumUpdateOne) SetDeletedAt(u uint32) *TxNumUpdateOne {
	tnuo.mutation.ResetDeletedAt()
	tnuo.mutation.SetDeletedAt(u)
	return tnuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tnuo *TxNumUpdateOne) SetNillableDeletedAt(u *uint32) *TxNumUpdateOne {
	if u != nil {
		tnuo.SetDeletedAt(*u)
	}
	return tnuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (tnuo *TxNumUpdateOne) AddDeletedAt(u int32) *TxNumUpdateOne {
	tnuo.mutation.AddDeletedAt(u)
	return tnuo
}

// SetTimeAt sets the "time_at" field.
func (tnuo *TxNumUpdateOne) SetTimeAt(u uint32) *TxNumUpdateOne {
	tnuo.mutation.ResetTimeAt()
	tnuo.mutation.SetTimeAt(u)
	return tnuo
}

// AddTimeAt adds u to the "time_at" field.
func (tnuo *TxNumUpdateOne) AddTimeAt(u int32) *TxNumUpdateOne {
	tnuo.mutation.AddTimeAt(u)
	return tnuo
}

// SetNum sets the "num" field.
func (tnuo *TxNumUpdateOne) SetNum(u uint32) *TxNumUpdateOne {
	tnuo.mutation.ResetNum()
	tnuo.mutation.SetNum(u)
	return tnuo
}

// AddNum adds u to the "num" field.
func (tnuo *TxNumUpdateOne) AddNum(u int32) *TxNumUpdateOne {
	tnuo.mutation.AddNum(u)
	return tnuo
}

// Mutation returns the TxNumMutation object of the builder.
func (tnuo *TxNumUpdateOne) Mutation() *TxNumMutation {
	return tnuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tnuo *TxNumUpdateOne) Select(field string, fields ...string) *TxNumUpdateOne {
	tnuo.fields = append([]string{field}, fields...)
	return tnuo
}

// Save executes the query and returns the updated TxNum entity.
func (tnuo *TxNumUpdateOne) Save(ctx context.Context) (*TxNum, error) {
	var (
		err  error
		node *TxNum
	)
	if err := tnuo.defaults(); err != nil {
		return nil, err
	}
	if len(tnuo.hooks) == 0 {
		node, err = tnuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TxNumMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tnuo.mutation = mutation
			node, err = tnuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tnuo.hooks) - 1; i >= 0; i-- {
			if tnuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tnuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tnuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TxNum)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TxNumMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tnuo *TxNumUpdateOne) SaveX(ctx context.Context) *TxNum {
	node, err := tnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tnuo *TxNumUpdateOne) Exec(ctx context.Context) error {
	_, err := tnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tnuo *TxNumUpdateOne) ExecX(ctx context.Context) {
	if err := tnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tnuo *TxNumUpdateOne) defaults() error {
	if _, ok := tnuo.mutation.UpdatedAt(); !ok {
		if txnum.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized txnum.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := txnum.UpdateDefaultUpdatedAt()
		tnuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tnuo *TxNumUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TxNumUpdateOne {
	tnuo.modifiers = append(tnuo.modifiers, modifiers...)
	return tnuo
}

func (tnuo *TxNumUpdateOne) sqlSave(ctx context.Context) (_node *TxNum, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   txnum.Table,
			Columns: txnum.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: txnum.FieldID,
			},
		},
	}
	id, ok := tnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TxNum.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, txnum.FieldID)
		for _, f := range fields {
			if !txnum.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != txnum.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tnuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldCreatedAt,
		})
	}
	if value, ok := tnuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldCreatedAt,
		})
	}
	if value, ok := tnuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldUpdatedAt,
		})
	}
	if value, ok := tnuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldUpdatedAt,
		})
	}
	if value, ok := tnuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldDeletedAt,
		})
	}
	if value, ok := tnuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldDeletedAt,
		})
	}
	if value, ok := tnuo.mutation.TimeAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldTimeAt,
		})
	}
	if value, ok := tnuo.mutation.AddedTimeAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldTimeAt,
		})
	}
	if value, ok := tnuo.mutation.Num(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldNum,
		})
	}
	if value, ok := tnuo.mutation.AddedNum(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldNum,
		})
	}
	_spec.Modifiers = tnuo.modifiers
	_node = &TxNum{config: tnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{txnum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
