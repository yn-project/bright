// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"yun.tea/block/bright/account/pkg/db/ent/txnum"
)

// TxNumCreate is the builder for creating a TxNum entity.
type TxNumCreate struct {
	config
	mutation *TxNumMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tnc *TxNumCreate) SetCreatedAt(u uint32) *TxNumCreate {
	tnc.mutation.SetCreatedAt(u)
	return tnc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tnc *TxNumCreate) SetNillableCreatedAt(u *uint32) *TxNumCreate {
	if u != nil {
		tnc.SetCreatedAt(*u)
	}
	return tnc
}

// SetUpdatedAt sets the "updated_at" field.
func (tnc *TxNumCreate) SetUpdatedAt(u uint32) *TxNumCreate {
	tnc.mutation.SetUpdatedAt(u)
	return tnc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tnc *TxNumCreate) SetNillableUpdatedAt(u *uint32) *TxNumCreate {
	if u != nil {
		tnc.SetUpdatedAt(*u)
	}
	return tnc
}

// SetDeletedAt sets the "deleted_at" field.
func (tnc *TxNumCreate) SetDeletedAt(u uint32) *TxNumCreate {
	tnc.mutation.SetDeletedAt(u)
	return tnc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tnc *TxNumCreate) SetNillableDeletedAt(u *uint32) *TxNumCreate {
	if u != nil {
		tnc.SetDeletedAt(*u)
	}
	return tnc
}

// SetTimeAt sets the "time_at" field.
func (tnc *TxNumCreate) SetTimeAt(u uint32) *TxNumCreate {
	tnc.mutation.SetTimeAt(u)
	return tnc
}

// SetNum sets the "num" field.
func (tnc *TxNumCreate) SetNum(u uint32) *TxNumCreate {
	tnc.mutation.SetNum(u)
	return tnc
}

// SetID sets the "id" field.
func (tnc *TxNumCreate) SetID(u uint32) *TxNumCreate {
	tnc.mutation.SetID(u)
	return tnc
}

// Mutation returns the TxNumMutation object of the builder.
func (tnc *TxNumCreate) Mutation() *TxNumMutation {
	return tnc.mutation
}

// Save creates the TxNum in the database.
func (tnc *TxNumCreate) Save(ctx context.Context) (*TxNum, error) {
	var (
		err  error
		node *TxNum
	)
	if err := tnc.defaults(); err != nil {
		return nil, err
	}
	if len(tnc.hooks) == 0 {
		if err = tnc.check(); err != nil {
			return nil, err
		}
		node, err = tnc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TxNumMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tnc.check(); err != nil {
				return nil, err
			}
			tnc.mutation = mutation
			if node, err = tnc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tnc.hooks) - 1; i >= 0; i-- {
			if tnc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tnc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tnc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*TxNum)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TxNumMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tnc *TxNumCreate) SaveX(ctx context.Context) *TxNum {
	v, err := tnc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tnc *TxNumCreate) Exec(ctx context.Context) error {
	_, err := tnc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tnc *TxNumCreate) ExecX(ctx context.Context) {
	if err := tnc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tnc *TxNumCreate) defaults() error {
	if _, ok := tnc.mutation.CreatedAt(); !ok {
		if txnum.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized txnum.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := txnum.DefaultCreatedAt()
		tnc.mutation.SetCreatedAt(v)
	}
	if _, ok := tnc.mutation.UpdatedAt(); !ok {
		if txnum.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized txnum.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := txnum.DefaultUpdatedAt()
		tnc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tnc.mutation.DeletedAt(); !ok {
		if txnum.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized txnum.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := txnum.DefaultDeletedAt()
		tnc.mutation.SetDeletedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tnc *TxNumCreate) check() error {
	if _, ok := tnc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TxNum.created_at"`)}
	}
	if _, ok := tnc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TxNum.updated_at"`)}
	}
	if _, ok := tnc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "TxNum.deleted_at"`)}
	}
	if _, ok := tnc.mutation.TimeAt(); !ok {
		return &ValidationError{Name: "time_at", err: errors.New(`ent: missing required field "TxNum.time_at"`)}
	}
	if _, ok := tnc.mutation.Num(); !ok {
		return &ValidationError{Name: "num", err: errors.New(`ent: missing required field "TxNum.num"`)}
	}
	return nil
}

func (tnc *TxNumCreate) sqlSave(ctx context.Context) (*TxNum, error) {
	_node, _spec := tnc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tnc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (tnc *TxNumCreate) createSpec() (*TxNum, *sqlgraph.CreateSpec) {
	var (
		_node = &TxNum{config: tnc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: txnum.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: txnum.FieldID,
			},
		}
	)
	_spec.OnConflict = tnc.conflict
	if id, ok := tnc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tnc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tnc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := tnc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := tnc.mutation.TimeAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldTimeAt,
		})
		_node.TimeAt = value
	}
	if value, ok := tnc.mutation.Num(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: txnum.FieldNum,
		})
		_node.Num = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TxNum.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TxNumUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tnc *TxNumCreate) OnConflict(opts ...sql.ConflictOption) *TxNumUpsertOne {
	tnc.conflict = opts
	return &TxNumUpsertOne{
		create: tnc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TxNum.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tnc *TxNumCreate) OnConflictColumns(columns ...string) *TxNumUpsertOne {
	tnc.conflict = append(tnc.conflict, sql.ConflictColumns(columns...))
	return &TxNumUpsertOne{
		create: tnc,
	}
}

type (
	// TxNumUpsertOne is the builder for "upsert"-ing
	//  one TxNum node.
	TxNumUpsertOne struct {
		create *TxNumCreate
	}

	// TxNumUpsert is the "OnConflict" setter.
	TxNumUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *TxNumUpsert) SetCreatedAt(v uint32) *TxNumUpsert {
	u.Set(txnum.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TxNumUpsert) UpdateCreatedAt() *TxNumUpsert {
	u.SetExcluded(txnum.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TxNumUpsert) AddCreatedAt(v uint32) *TxNumUpsert {
	u.Add(txnum.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TxNumUpsert) SetUpdatedAt(v uint32) *TxNumUpsert {
	u.Set(txnum.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TxNumUpsert) UpdateUpdatedAt() *TxNumUpsert {
	u.SetExcluded(txnum.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TxNumUpsert) AddUpdatedAt(v uint32) *TxNumUpsert {
	u.Add(txnum.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TxNumUpsert) SetDeletedAt(v uint32) *TxNumUpsert {
	u.Set(txnum.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TxNumUpsert) UpdateDeletedAt() *TxNumUpsert {
	u.SetExcluded(txnum.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TxNumUpsert) AddDeletedAt(v uint32) *TxNumUpsert {
	u.Add(txnum.FieldDeletedAt, v)
	return u
}

// SetTimeAt sets the "time_at" field.
func (u *TxNumUpsert) SetTimeAt(v uint32) *TxNumUpsert {
	u.Set(txnum.FieldTimeAt, v)
	return u
}

// UpdateTimeAt sets the "time_at" field to the value that was provided on create.
func (u *TxNumUpsert) UpdateTimeAt() *TxNumUpsert {
	u.SetExcluded(txnum.FieldTimeAt)
	return u
}

// AddTimeAt adds v to the "time_at" field.
func (u *TxNumUpsert) AddTimeAt(v uint32) *TxNumUpsert {
	u.Add(txnum.FieldTimeAt, v)
	return u
}

// SetNum sets the "num" field.
func (u *TxNumUpsert) SetNum(v uint32) *TxNumUpsert {
	u.Set(txnum.FieldNum, v)
	return u
}

// UpdateNum sets the "num" field to the value that was provided on create.
func (u *TxNumUpsert) UpdateNum() *TxNumUpsert {
	u.SetExcluded(txnum.FieldNum)
	return u
}

// AddNum adds v to the "num" field.
func (u *TxNumUpsert) AddNum(v uint32) *TxNumUpsert {
	u.Add(txnum.FieldNum, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TxNum.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(txnum.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TxNumUpsertOne) UpdateNewValues() *TxNumUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(txnum.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TxNum.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TxNumUpsertOne) Ignore() *TxNumUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TxNumUpsertOne) DoNothing() *TxNumUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TxNumCreate.OnConflict
// documentation for more info.
func (u *TxNumUpsertOne) Update(set func(*TxNumUpsert)) *TxNumUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TxNumUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TxNumUpsertOne) SetCreatedAt(v uint32) *TxNumUpsertOne {
	return u.Update(func(s *TxNumUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TxNumUpsertOne) AddCreatedAt(v uint32) *TxNumUpsertOne {
	return u.Update(func(s *TxNumUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TxNumUpsertOne) UpdateCreatedAt() *TxNumUpsertOne {
	return u.Update(func(s *TxNumUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TxNumUpsertOne) SetUpdatedAt(v uint32) *TxNumUpsertOne {
	return u.Update(func(s *TxNumUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TxNumUpsertOne) AddUpdatedAt(v uint32) *TxNumUpsertOne {
	return u.Update(func(s *TxNumUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TxNumUpsertOne) UpdateUpdatedAt() *TxNumUpsertOne {
	return u.Update(func(s *TxNumUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TxNumUpsertOne) SetDeletedAt(v uint32) *TxNumUpsertOne {
	return u.Update(func(s *TxNumUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TxNumUpsertOne) AddDeletedAt(v uint32) *TxNumUpsertOne {
	return u.Update(func(s *TxNumUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TxNumUpsertOne) UpdateDeletedAt() *TxNumUpsertOne {
	return u.Update(func(s *TxNumUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetTimeAt sets the "time_at" field.
func (u *TxNumUpsertOne) SetTimeAt(v uint32) *TxNumUpsertOne {
	return u.Update(func(s *TxNumUpsert) {
		s.SetTimeAt(v)
	})
}

// AddTimeAt adds v to the "time_at" field.
func (u *TxNumUpsertOne) AddTimeAt(v uint32) *TxNumUpsertOne {
	return u.Update(func(s *TxNumUpsert) {
		s.AddTimeAt(v)
	})
}

// UpdateTimeAt sets the "time_at" field to the value that was provided on create.
func (u *TxNumUpsertOne) UpdateTimeAt() *TxNumUpsertOne {
	return u.Update(func(s *TxNumUpsert) {
		s.UpdateTimeAt()
	})
}

// SetNum sets the "num" field.
func (u *TxNumUpsertOne) SetNum(v uint32) *TxNumUpsertOne {
	return u.Update(func(s *TxNumUpsert) {
		s.SetNum(v)
	})
}

// AddNum adds v to the "num" field.
func (u *TxNumUpsertOne) AddNum(v uint32) *TxNumUpsertOne {
	return u.Update(func(s *TxNumUpsert) {
		s.AddNum(v)
	})
}

// UpdateNum sets the "num" field to the value that was provided on create.
func (u *TxNumUpsertOne) UpdateNum() *TxNumUpsertOne {
	return u.Update(func(s *TxNumUpsert) {
		s.UpdateNum()
	})
}

// Exec executes the query.
func (u *TxNumUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TxNumCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TxNumUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TxNumUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TxNumUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TxNumCreateBulk is the builder for creating many TxNum entities in bulk.
type TxNumCreateBulk struct {
	config
	builders []*TxNumCreate
	conflict []sql.ConflictOption
}

// Save creates the TxNum entities in the database.
func (tncb *TxNumCreateBulk) Save(ctx context.Context) ([]*TxNum, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tncb.builders))
	nodes := make([]*TxNum, len(tncb.builders))
	mutators := make([]Mutator, len(tncb.builders))
	for i := range tncb.builders {
		func(i int, root context.Context) {
			builder := tncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TxNumMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tncb *TxNumCreateBulk) SaveX(ctx context.Context) []*TxNum {
	v, err := tncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tncb *TxNumCreateBulk) Exec(ctx context.Context) error {
	_, err := tncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tncb *TxNumCreateBulk) ExecX(ctx context.Context) {
	if err := tncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TxNum.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TxNumUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tncb *TxNumCreateBulk) OnConflict(opts ...sql.ConflictOption) *TxNumUpsertBulk {
	tncb.conflict = opts
	return &TxNumUpsertBulk{
		create: tncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TxNum.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tncb *TxNumCreateBulk) OnConflictColumns(columns ...string) *TxNumUpsertBulk {
	tncb.conflict = append(tncb.conflict, sql.ConflictColumns(columns...))
	return &TxNumUpsertBulk{
		create: tncb,
	}
}

// TxNumUpsertBulk is the builder for "upsert"-ing
// a bulk of TxNum nodes.
type TxNumUpsertBulk struct {
	create *TxNumCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TxNum.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(txnum.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TxNumUpsertBulk) UpdateNewValues() *TxNumUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(txnum.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TxNum.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TxNumUpsertBulk) Ignore() *TxNumUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TxNumUpsertBulk) DoNothing() *TxNumUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TxNumCreateBulk.OnConflict
// documentation for more info.
func (u *TxNumUpsertBulk) Update(set func(*TxNumUpsert)) *TxNumUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TxNumUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TxNumUpsertBulk) SetCreatedAt(v uint32) *TxNumUpsertBulk {
	return u.Update(func(s *TxNumUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *TxNumUpsertBulk) AddCreatedAt(v uint32) *TxNumUpsertBulk {
	return u.Update(func(s *TxNumUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TxNumUpsertBulk) UpdateCreatedAt() *TxNumUpsertBulk {
	return u.Update(func(s *TxNumUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TxNumUpsertBulk) SetUpdatedAt(v uint32) *TxNumUpsertBulk {
	return u.Update(func(s *TxNumUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *TxNumUpsertBulk) AddUpdatedAt(v uint32) *TxNumUpsertBulk {
	return u.Update(func(s *TxNumUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TxNumUpsertBulk) UpdateUpdatedAt() *TxNumUpsertBulk {
	return u.Update(func(s *TxNumUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TxNumUpsertBulk) SetDeletedAt(v uint32) *TxNumUpsertBulk {
	return u.Update(func(s *TxNumUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *TxNumUpsertBulk) AddDeletedAt(v uint32) *TxNumUpsertBulk {
	return u.Update(func(s *TxNumUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TxNumUpsertBulk) UpdateDeletedAt() *TxNumUpsertBulk {
	return u.Update(func(s *TxNumUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetTimeAt sets the "time_at" field.
func (u *TxNumUpsertBulk) SetTimeAt(v uint32) *TxNumUpsertBulk {
	return u.Update(func(s *TxNumUpsert) {
		s.SetTimeAt(v)
	})
}

// AddTimeAt adds v to the "time_at" field.
func (u *TxNumUpsertBulk) AddTimeAt(v uint32) *TxNumUpsertBulk {
	return u.Update(func(s *TxNumUpsert) {
		s.AddTimeAt(v)
	})
}

// UpdateTimeAt sets the "time_at" field to the value that was provided on create.
func (u *TxNumUpsertBulk) UpdateTimeAt() *TxNumUpsertBulk {
	return u.Update(func(s *TxNumUpsert) {
		s.UpdateTimeAt()
	})
}

// SetNum sets the "num" field.
func (u *TxNumUpsertBulk) SetNum(v uint32) *TxNumUpsertBulk {
	return u.Update(func(s *TxNumUpsert) {
		s.SetNum(v)
	})
}

// AddNum adds v to the "num" field.
func (u *TxNumUpsertBulk) AddNum(v uint32) *TxNumUpsertBulk {
	return u.Update(func(s *TxNumUpsert) {
		s.AddNum(v)
	})
}

// UpdateNum sets the "num" field to the value that was provided on create.
func (u *TxNumUpsertBulk) UpdateNum() *TxNumUpsertBulk {
	return u.Update(func(s *TxNumUpsert) {
		s.UpdateNum()
	})
}

// Exec executes the query.
func (u *TxNumUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TxNumCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TxNumCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TxNumUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
