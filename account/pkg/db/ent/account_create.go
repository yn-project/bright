// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"yun.tea/block/bright/account/pkg/db/ent/account"
)

// AccountCreate is the builder for creating a Account entity.
type AccountCreate struct {
	config
	mutation *AccountMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ac *AccountCreate) SetCreatedAt(u uint32) *AccountCreate {
	ac.mutation.SetCreatedAt(u)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AccountCreate) SetNillableCreatedAt(u *uint32) *AccountCreate {
	if u != nil {
		ac.SetCreatedAt(*u)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AccountCreate) SetUpdatedAt(u uint32) *AccountCreate {
	ac.mutation.SetUpdatedAt(u)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AccountCreate) SetNillableUpdatedAt(u *uint32) *AccountCreate {
	if u != nil {
		ac.SetUpdatedAt(*u)
	}
	return ac
}

// SetDeletedAt sets the "deleted_at" field.
func (ac *AccountCreate) SetDeletedAt(u uint32) *AccountCreate {
	ac.mutation.SetDeletedAt(u)
	return ac
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ac *AccountCreate) SetNillableDeletedAt(u *uint32) *AccountCreate {
	if u != nil {
		ac.SetDeletedAt(*u)
	}
	return ac
}

// SetAddress sets the "address" field.
func (ac *AccountCreate) SetAddress(s string) *AccountCreate {
	ac.mutation.SetAddress(s)
	return ac
}

// SetPriKey sets the "pri_key" field.
func (ac *AccountCreate) SetPriKey(s string) *AccountCreate {
	ac.mutation.SetPriKey(s)
	return ac
}

// SetBalance sets the "balance" field.
func (ac *AccountCreate) SetBalance(s string) *AccountCreate {
	ac.mutation.SetBalance(s)
	return ac
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (ac *AccountCreate) SetNillableBalance(s *string) *AccountCreate {
	if s != nil {
		ac.SetBalance(*s)
	}
	return ac
}

// SetEnable sets the "enable" field.
func (ac *AccountCreate) SetEnable(b bool) *AccountCreate {
	ac.mutation.SetEnable(b)
	return ac
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (ac *AccountCreate) SetNillableEnable(b *bool) *AccountCreate {
	if b != nil {
		ac.SetEnable(*b)
	}
	return ac
}

// SetIsRoot sets the "is_root" field.
func (ac *AccountCreate) SetIsRoot(b bool) *AccountCreate {
	ac.mutation.SetIsRoot(b)
	return ac
}

// SetNillableIsRoot sets the "is_root" field if the given value is not nil.
func (ac *AccountCreate) SetNillableIsRoot(b *bool) *AccountCreate {
	if b != nil {
		ac.SetIsRoot(*b)
	}
	return ac
}

// SetRemark sets the "remark" field.
func (ac *AccountCreate) SetRemark(s string) *AccountCreate {
	ac.mutation.SetRemark(s)
	return ac
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ac *AccountCreate) SetNillableRemark(s *string) *AccountCreate {
	if s != nil {
		ac.SetRemark(*s)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AccountCreate) SetID(u uuid.UUID) *AccountCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AccountCreate) SetNillableID(u *uuid.UUID) *AccountCreate {
	if u != nil {
		ac.SetID(*u)
	}
	return ac
}

// Mutation returns the AccountMutation object of the builder.
func (ac *AccountCreate) Mutation() *AccountMutation {
	return ac.mutation
}

// Save creates the Account in the database.
func (ac *AccountCreate) Save(ctx context.Context) (*Account, error) {
	var (
		err  error
		node *Account
	)
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Account)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AccountMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AccountCreate) SaveX(ctx context.Context) *Account {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AccountCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AccountCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AccountCreate) defaults() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		if account.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized account.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := account.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		if account.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized account.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := account.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.DeletedAt(); !ok {
		if account.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized account.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := account.DefaultDeletedAt()
		ac.mutation.SetDeletedAt(v)
	}
	if _, ok := ac.mutation.Enable(); !ok {
		v := account.DefaultEnable
		ac.mutation.SetEnable(v)
	}
	if _, ok := ac.mutation.IsRoot(); !ok {
		v := account.DefaultIsRoot
		ac.mutation.SetIsRoot(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		if account.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized account.DefaultID (forgotten import ent/runtime?)")
		}
		v := account.DefaultID()
		ac.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *AccountCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Account.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Account.updated_at"`)}
	}
	if _, ok := ac.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Account.deleted_at"`)}
	}
	if _, ok := ac.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Account.address"`)}
	}
	if _, ok := ac.mutation.PriKey(); !ok {
		return &ValidationError{Name: "pri_key", err: errors.New(`ent: missing required field "Account.pri_key"`)}
	}
	if _, ok := ac.mutation.Enable(); !ok {
		return &ValidationError{Name: "enable", err: errors.New(`ent: missing required field "Account.enable"`)}
	}
	if _, ok := ac.mutation.IsRoot(); !ok {
		return &ValidationError{Name: "is_root", err: errors.New(`ent: missing required field "Account.is_root"`)}
	}
	return nil
}

func (ac *AccountCreate) sqlSave(ctx context.Context) (*Account, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ac *AccountCreate) createSpec() (*Account, *sqlgraph.CreateSpec) {
	var (
		_node = &Account{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: account.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: account.FieldID,
			},
		}
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: account.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: account.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: account.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := ac.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldAddress,
		})
		_node.Address = value
	}
	if value, ok := ac.mutation.PriKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldPriKey,
		})
		_node.PriKey = value
	}
	if value, ok := ac.mutation.Balance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldBalance,
		})
		_node.Balance = value
	}
	if value, ok := ac.mutation.Enable(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: account.FieldEnable,
		})
		_node.Enable = value
	}
	if value, ok := ac.mutation.IsRoot(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: account.FieldIsRoot,
		})
		_node.IsRoot = value
	}
	if value, ok := ac.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldRemark,
		})
		_node.Remark = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Account.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccountUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ac *AccountCreate) OnConflict(opts ...sql.ConflictOption) *AccountUpsertOne {
	ac.conflict = opts
	return &AccountUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AccountCreate) OnConflictColumns(columns ...string) *AccountUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AccountUpsertOne{
		create: ac,
	}
}

type (
	// AccountUpsertOne is the builder for "upsert"-ing
	//  one Account node.
	AccountUpsertOne struct {
		create *AccountCreate
	}

	// AccountUpsert is the "OnConflict" setter.
	AccountUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *AccountUpsert) SetCreatedAt(v uint32) *AccountUpsert {
	u.Set(account.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AccountUpsert) UpdateCreatedAt() *AccountUpsert {
	u.SetExcluded(account.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AccountUpsert) AddCreatedAt(v uint32) *AccountUpsert {
	u.Add(account.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AccountUpsert) SetUpdatedAt(v uint32) *AccountUpsert {
	u.Set(account.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AccountUpsert) UpdateUpdatedAt() *AccountUpsert {
	u.SetExcluded(account.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AccountUpsert) AddUpdatedAt(v uint32) *AccountUpsert {
	u.Add(account.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AccountUpsert) SetDeletedAt(v uint32) *AccountUpsert {
	u.Set(account.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AccountUpsert) UpdateDeletedAt() *AccountUpsert {
	u.SetExcluded(account.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AccountUpsert) AddDeletedAt(v uint32) *AccountUpsert {
	u.Add(account.FieldDeletedAt, v)
	return u
}

// SetAddress sets the "address" field.
func (u *AccountUpsert) SetAddress(v string) *AccountUpsert {
	u.Set(account.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AccountUpsert) UpdateAddress() *AccountUpsert {
	u.SetExcluded(account.FieldAddress)
	return u
}

// SetPriKey sets the "pri_key" field.
func (u *AccountUpsert) SetPriKey(v string) *AccountUpsert {
	u.Set(account.FieldPriKey, v)
	return u
}

// UpdatePriKey sets the "pri_key" field to the value that was provided on create.
func (u *AccountUpsert) UpdatePriKey() *AccountUpsert {
	u.SetExcluded(account.FieldPriKey)
	return u
}

// SetBalance sets the "balance" field.
func (u *AccountUpsert) SetBalance(v string) *AccountUpsert {
	u.Set(account.FieldBalance, v)
	return u
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *AccountUpsert) UpdateBalance() *AccountUpsert {
	u.SetExcluded(account.FieldBalance)
	return u
}

// ClearBalance clears the value of the "balance" field.
func (u *AccountUpsert) ClearBalance() *AccountUpsert {
	u.SetNull(account.FieldBalance)
	return u
}

// SetEnable sets the "enable" field.
func (u *AccountUpsert) SetEnable(v bool) *AccountUpsert {
	u.Set(account.FieldEnable, v)
	return u
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *AccountUpsert) UpdateEnable() *AccountUpsert {
	u.SetExcluded(account.FieldEnable)
	return u
}

// SetIsRoot sets the "is_root" field.
func (u *AccountUpsert) SetIsRoot(v bool) *AccountUpsert {
	u.Set(account.FieldIsRoot, v)
	return u
}

// UpdateIsRoot sets the "is_root" field to the value that was provided on create.
func (u *AccountUpsert) UpdateIsRoot() *AccountUpsert {
	u.SetExcluded(account.FieldIsRoot)
	return u
}

// SetRemark sets the "remark" field.
func (u *AccountUpsert) SetRemark(v string) *AccountUpsert {
	u.Set(account.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AccountUpsert) UpdateRemark() *AccountUpsert {
	u.SetExcluded(account.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *AccountUpsert) ClearRemark() *AccountUpsert {
	u.SetNull(account.FieldRemark)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(account.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AccountUpsertOne) UpdateNewValues() *AccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(account.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Account.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AccountUpsertOne) Ignore() *AccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccountUpsertOne) DoNothing() *AccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccountCreate.OnConflict
// documentation for more info.
func (u *AccountUpsertOne) Update(set func(*AccountUpsert)) *AccountUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AccountUpsertOne) SetCreatedAt(v uint32) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AccountUpsertOne) AddCreatedAt(v uint32) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateCreatedAt() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AccountUpsertOne) SetUpdatedAt(v uint32) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AccountUpsertOne) AddUpdatedAt(v uint32) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateUpdatedAt() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AccountUpsertOne) SetDeletedAt(v uint32) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AccountUpsertOne) AddDeletedAt(v uint32) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateDeletedAt() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAddress sets the "address" field.
func (u *AccountUpsertOne) SetAddress(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateAddress() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateAddress()
	})
}

// SetPriKey sets the "pri_key" field.
func (u *AccountUpsertOne) SetPriKey(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetPriKey(v)
	})
}

// UpdatePriKey sets the "pri_key" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdatePriKey() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdatePriKey()
	})
}

// SetBalance sets the "balance" field.
func (u *AccountUpsertOne) SetBalance(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateBalance() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateBalance()
	})
}

// ClearBalance clears the value of the "balance" field.
func (u *AccountUpsertOne) ClearBalance() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.ClearBalance()
	})
}

// SetEnable sets the "enable" field.
func (u *AccountUpsertOne) SetEnable(v bool) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateEnable() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateEnable()
	})
}

// SetIsRoot sets the "is_root" field.
func (u *AccountUpsertOne) SetIsRoot(v bool) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetIsRoot(v)
	})
}

// UpdateIsRoot sets the "is_root" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateIsRoot() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateIsRoot()
	})
}

// SetRemark sets the "remark" field.
func (u *AccountUpsertOne) SetRemark(v string) *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AccountUpsertOne) UpdateRemark() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AccountUpsertOne) ClearRemark() *AccountUpsertOne {
	return u.Update(func(s *AccountUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *AccountUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AccountCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccountUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AccountUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AccountUpsertOne.ID is not supported by MySQL driver. Use AccountUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AccountUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AccountCreateBulk is the builder for creating many Account entities in bulk.
type AccountCreateBulk struct {
	config
	builders []*AccountCreate
	conflict []sql.ConflictOption
}

// Save creates the Account entities in the database.
func (acb *AccountCreateBulk) Save(ctx context.Context) ([]*Account, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Account, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AccountCreateBulk) SaveX(ctx context.Context) []*Account {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AccountCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AccountCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Account.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AccountUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (acb *AccountCreateBulk) OnConflict(opts ...sql.ConflictOption) *AccountUpsertBulk {
	acb.conflict = opts
	return &AccountUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AccountCreateBulk) OnConflictColumns(columns ...string) *AccountUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AccountUpsertBulk{
		create: acb,
	}
}

// AccountUpsertBulk is the builder for "upsert"-ing
// a bulk of Account nodes.
type AccountUpsertBulk struct {
	create *AccountCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(account.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AccountUpsertBulk) UpdateNewValues() *AccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(account.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Account.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AccountUpsertBulk) Ignore() *AccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AccountUpsertBulk) DoNothing() *AccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AccountCreateBulk.OnConflict
// documentation for more info.
func (u *AccountUpsertBulk) Update(set func(*AccountUpsert)) *AccountUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AccountUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *AccountUpsertBulk) SetCreatedAt(v uint32) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *AccountUpsertBulk) AddCreatedAt(v uint32) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateCreatedAt() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AccountUpsertBulk) SetUpdatedAt(v uint32) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *AccountUpsertBulk) AddUpdatedAt(v uint32) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateUpdatedAt() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AccountUpsertBulk) SetDeletedAt(v uint32) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *AccountUpsertBulk) AddDeletedAt(v uint32) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateDeletedAt() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetAddress sets the "address" field.
func (u *AccountUpsertBulk) SetAddress(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateAddress() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateAddress()
	})
}

// SetPriKey sets the "pri_key" field.
func (u *AccountUpsertBulk) SetPriKey(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetPriKey(v)
	})
}

// UpdatePriKey sets the "pri_key" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdatePriKey() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdatePriKey()
	})
}

// SetBalance sets the "balance" field.
func (u *AccountUpsertBulk) SetBalance(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateBalance() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateBalance()
	})
}

// ClearBalance clears the value of the "balance" field.
func (u *AccountUpsertBulk) ClearBalance() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.ClearBalance()
	})
}

// SetEnable sets the "enable" field.
func (u *AccountUpsertBulk) SetEnable(v bool) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateEnable() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateEnable()
	})
}

// SetIsRoot sets the "is_root" field.
func (u *AccountUpsertBulk) SetIsRoot(v bool) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetIsRoot(v)
	})
}

// UpdateIsRoot sets the "is_root" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateIsRoot() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateIsRoot()
	})
}

// SetRemark sets the "remark" field.
func (u *AccountUpsertBulk) SetRemark(v string) *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *AccountUpsertBulk) UpdateRemark() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *AccountUpsertBulk) ClearRemark() *AccountUpsertBulk {
	return u.Update(func(s *AccountUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *AccountUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AccountCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AccountCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AccountUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
