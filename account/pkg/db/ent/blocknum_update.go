// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"yun.tea/block/bright/account/pkg/db/ent/blocknum"
	"yun.tea/block/bright/account/pkg/db/ent/predicate"
)

// BlockNumUpdate is the builder for updating BlockNum entities.
type BlockNumUpdate struct {
	config
	hooks     []Hook
	mutation  *BlockNumMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the BlockNumUpdate builder.
func (bnu *BlockNumUpdate) Where(ps ...predicate.BlockNum) *BlockNumUpdate {
	bnu.mutation.Where(ps...)
	return bnu
}

// SetCreatedAt sets the "created_at" field.
func (bnu *BlockNumUpdate) SetCreatedAt(u uint32) *BlockNumUpdate {
	bnu.mutation.ResetCreatedAt()
	bnu.mutation.SetCreatedAt(u)
	return bnu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bnu *BlockNumUpdate) SetNillableCreatedAt(u *uint32) *BlockNumUpdate {
	if u != nil {
		bnu.SetCreatedAt(*u)
	}
	return bnu
}

// AddCreatedAt adds u to the "created_at" field.
func (bnu *BlockNumUpdate) AddCreatedAt(u int32) *BlockNumUpdate {
	bnu.mutation.AddCreatedAt(u)
	return bnu
}

// SetUpdatedAt sets the "updated_at" field.
func (bnu *BlockNumUpdate) SetUpdatedAt(u uint32) *BlockNumUpdate {
	bnu.mutation.ResetUpdatedAt()
	bnu.mutation.SetUpdatedAt(u)
	return bnu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (bnu *BlockNumUpdate) AddUpdatedAt(u int32) *BlockNumUpdate {
	bnu.mutation.AddUpdatedAt(u)
	return bnu
}

// SetDeletedAt sets the "deleted_at" field.
func (bnu *BlockNumUpdate) SetDeletedAt(u uint32) *BlockNumUpdate {
	bnu.mutation.ResetDeletedAt()
	bnu.mutation.SetDeletedAt(u)
	return bnu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bnu *BlockNumUpdate) SetNillableDeletedAt(u *uint32) *BlockNumUpdate {
	if u != nil {
		bnu.SetDeletedAt(*u)
	}
	return bnu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (bnu *BlockNumUpdate) AddDeletedAt(u int32) *BlockNumUpdate {
	bnu.mutation.AddDeletedAt(u)
	return bnu
}

// SetTimeAt sets the "time_at" field.
func (bnu *BlockNumUpdate) SetTimeAt(u uint32) *BlockNumUpdate {
	bnu.mutation.ResetTimeAt()
	bnu.mutation.SetTimeAt(u)
	return bnu
}

// AddTimeAt adds u to the "time_at" field.
func (bnu *BlockNumUpdate) AddTimeAt(u int32) *BlockNumUpdate {
	bnu.mutation.AddTimeAt(u)
	return bnu
}

// SetHeight sets the "height" field.
func (bnu *BlockNumUpdate) SetHeight(u uint64) *BlockNumUpdate {
	bnu.mutation.ResetHeight()
	bnu.mutation.SetHeight(u)
	return bnu
}

// AddHeight adds u to the "height" field.
func (bnu *BlockNumUpdate) AddHeight(u int64) *BlockNumUpdate {
	bnu.mutation.AddHeight(u)
	return bnu
}

// Mutation returns the BlockNumMutation object of the builder.
func (bnu *BlockNumUpdate) Mutation() *BlockNumMutation {
	return bnu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bnu *BlockNumUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := bnu.defaults(); err != nil {
		return 0, err
	}
	if len(bnu.hooks) == 0 {
		affected, err = bnu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlockNumMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bnu.mutation = mutation
			affected, err = bnu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bnu.hooks) - 1; i >= 0; i-- {
			if bnu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bnu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bnu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bnu *BlockNumUpdate) SaveX(ctx context.Context) int {
	affected, err := bnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bnu *BlockNumUpdate) Exec(ctx context.Context) error {
	_, err := bnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bnu *BlockNumUpdate) ExecX(ctx context.Context) {
	if err := bnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bnu *BlockNumUpdate) defaults() error {
	if _, ok := bnu.mutation.UpdatedAt(); !ok {
		if blocknum.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized blocknum.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := blocknum.UpdateDefaultUpdatedAt()
		bnu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bnu *BlockNumUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BlockNumUpdate {
	bnu.modifiers = append(bnu.modifiers, modifiers...)
	return bnu
}

func (bnu *BlockNumUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   blocknum.Table,
			Columns: blocknum.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: blocknum.FieldID,
			},
		},
	}
	if ps := bnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bnu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: blocknum.FieldCreatedAt,
		})
	}
	if value, ok := bnu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: blocknum.FieldCreatedAt,
		})
	}
	if value, ok := bnu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: blocknum.FieldUpdatedAt,
		})
	}
	if value, ok := bnu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: blocknum.FieldUpdatedAt,
		})
	}
	if value, ok := bnu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: blocknum.FieldDeletedAt,
		})
	}
	if value, ok := bnu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: blocknum.FieldDeletedAt,
		})
	}
	if value, ok := bnu.mutation.TimeAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: blocknum.FieldTimeAt,
		})
	}
	if value, ok := bnu.mutation.AddedTimeAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: blocknum.FieldTimeAt,
		})
	}
	if value, ok := bnu.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: blocknum.FieldHeight,
		})
	}
	if value, ok := bnu.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: blocknum.FieldHeight,
		})
	}
	_spec.Modifiers = bnu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, bnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blocknum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// BlockNumUpdateOne is the builder for updating a single BlockNum entity.
type BlockNumUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *BlockNumMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (bnuo *BlockNumUpdateOne) SetCreatedAt(u uint32) *BlockNumUpdateOne {
	bnuo.mutation.ResetCreatedAt()
	bnuo.mutation.SetCreatedAt(u)
	return bnuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bnuo *BlockNumUpdateOne) SetNillableCreatedAt(u *uint32) *BlockNumUpdateOne {
	if u != nil {
		bnuo.SetCreatedAt(*u)
	}
	return bnuo
}

// AddCreatedAt adds u to the "created_at" field.
func (bnuo *BlockNumUpdateOne) AddCreatedAt(u int32) *BlockNumUpdateOne {
	bnuo.mutation.AddCreatedAt(u)
	return bnuo
}

// SetUpdatedAt sets the "updated_at" field.
func (bnuo *BlockNumUpdateOne) SetUpdatedAt(u uint32) *BlockNumUpdateOne {
	bnuo.mutation.ResetUpdatedAt()
	bnuo.mutation.SetUpdatedAt(u)
	return bnuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (bnuo *BlockNumUpdateOne) AddUpdatedAt(u int32) *BlockNumUpdateOne {
	bnuo.mutation.AddUpdatedAt(u)
	return bnuo
}

// SetDeletedAt sets the "deleted_at" field.
func (bnuo *BlockNumUpdateOne) SetDeletedAt(u uint32) *BlockNumUpdateOne {
	bnuo.mutation.ResetDeletedAt()
	bnuo.mutation.SetDeletedAt(u)
	return bnuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (bnuo *BlockNumUpdateOne) SetNillableDeletedAt(u *uint32) *BlockNumUpdateOne {
	if u != nil {
		bnuo.SetDeletedAt(*u)
	}
	return bnuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (bnuo *BlockNumUpdateOne) AddDeletedAt(u int32) *BlockNumUpdateOne {
	bnuo.mutation.AddDeletedAt(u)
	return bnuo
}

// SetTimeAt sets the "time_at" field.
func (bnuo *BlockNumUpdateOne) SetTimeAt(u uint32) *BlockNumUpdateOne {
	bnuo.mutation.ResetTimeAt()
	bnuo.mutation.SetTimeAt(u)
	return bnuo
}

// AddTimeAt adds u to the "time_at" field.
func (bnuo *BlockNumUpdateOne) AddTimeAt(u int32) *BlockNumUpdateOne {
	bnuo.mutation.AddTimeAt(u)
	return bnuo
}

// SetHeight sets the "height" field.
func (bnuo *BlockNumUpdateOne) SetHeight(u uint64) *BlockNumUpdateOne {
	bnuo.mutation.ResetHeight()
	bnuo.mutation.SetHeight(u)
	return bnuo
}

// AddHeight adds u to the "height" field.
func (bnuo *BlockNumUpdateOne) AddHeight(u int64) *BlockNumUpdateOne {
	bnuo.mutation.AddHeight(u)
	return bnuo
}

// Mutation returns the BlockNumMutation object of the builder.
func (bnuo *BlockNumUpdateOne) Mutation() *BlockNumMutation {
	return bnuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bnuo *BlockNumUpdateOne) Select(field string, fields ...string) *BlockNumUpdateOne {
	bnuo.fields = append([]string{field}, fields...)
	return bnuo
}

// Save executes the query and returns the updated BlockNum entity.
func (bnuo *BlockNumUpdateOne) Save(ctx context.Context) (*BlockNum, error) {
	var (
		err  error
		node *BlockNum
	)
	if err := bnuo.defaults(); err != nil {
		return nil, err
	}
	if len(bnuo.hooks) == 0 {
		node, err = bnuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlockNumMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bnuo.mutation = mutation
			node, err = bnuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bnuo.hooks) - 1; i >= 0; i-- {
			if bnuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bnuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, bnuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*BlockNum)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BlockNumMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (bnuo *BlockNumUpdateOne) SaveX(ctx context.Context) *BlockNum {
	node, err := bnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bnuo *BlockNumUpdateOne) Exec(ctx context.Context) error {
	_, err := bnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bnuo *BlockNumUpdateOne) ExecX(ctx context.Context) {
	if err := bnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bnuo *BlockNumUpdateOne) defaults() error {
	if _, ok := bnuo.mutation.UpdatedAt(); !ok {
		if blocknum.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized blocknum.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := blocknum.UpdateDefaultUpdatedAt()
		bnuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (bnuo *BlockNumUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *BlockNumUpdateOne {
	bnuo.modifiers = append(bnuo.modifiers, modifiers...)
	return bnuo
}

func (bnuo *BlockNumUpdateOne) sqlSave(ctx context.Context) (_node *BlockNum, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   blocknum.Table,
			Columns: blocknum.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: blocknum.FieldID,
			},
		},
	}
	id, ok := bnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlockNum.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blocknum.FieldID)
		for _, f := range fields {
			if !blocknum.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blocknum.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bnuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: blocknum.FieldCreatedAt,
		})
	}
	if value, ok := bnuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: blocknum.FieldCreatedAt,
		})
	}
	if value, ok := bnuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: blocknum.FieldUpdatedAt,
		})
	}
	if value, ok := bnuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: blocknum.FieldUpdatedAt,
		})
	}
	if value, ok := bnuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: blocknum.FieldDeletedAt,
		})
	}
	if value, ok := bnuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: blocknum.FieldDeletedAt,
		})
	}
	if value, ok := bnuo.mutation.TimeAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: blocknum.FieldTimeAt,
		})
	}
	if value, ok := bnuo.mutation.AddedTimeAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: blocknum.FieldTimeAt,
		})
	}
	if value, ok := bnuo.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: blocknum.FieldHeight,
		})
	}
	if value, ok := bnuo.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: blocknum.FieldHeight,
		})
	}
	_spec.Modifiers = bnuo.modifiers
	_node = &BlockNum{config: bnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blocknum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
