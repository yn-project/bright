// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"yun.tea/block/bright/account/pkg/db/ent/txnum"
)

// TxNum is the model entity for the TxNum schema.
type TxNum struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// TimeAt holds the value of the "time_at" field.
	TimeAt uint32 `json:"time_at,omitempty"`
	// Num holds the value of the "num" field.
	Num uint32 `json:"num,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TxNum) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case txnum.FieldID, txnum.FieldCreatedAt, txnum.FieldUpdatedAt, txnum.FieldDeletedAt, txnum.FieldTimeAt, txnum.FieldNum:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TxNum", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TxNum fields.
func (tn *TxNum) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case txnum.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tn.ID = uint32(value.Int64)
		case txnum.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tn.CreatedAt = uint32(value.Int64)
			}
		case txnum.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tn.UpdatedAt = uint32(value.Int64)
			}
		case txnum.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tn.DeletedAt = uint32(value.Int64)
			}
		case txnum.FieldTimeAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field time_at", values[i])
			} else if value.Valid {
				tn.TimeAt = uint32(value.Int64)
			}
		case txnum.FieldNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field num", values[i])
			} else if value.Valid {
				tn.Num = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TxNum.
// Note that you need to call TxNum.Unwrap() before calling this method if this TxNum
// was returned from a transaction, and the transaction was committed or rolled back.
func (tn *TxNum) Update() *TxNumUpdateOne {
	return (&TxNumClient{config: tn.config}).UpdateOne(tn)
}

// Unwrap unwraps the TxNum entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tn *TxNum) Unwrap() *TxNum {
	_tx, ok := tn.config.driver.(*txDriver)
	if !ok {
		panic("ent: TxNum is not a transactional entity")
	}
	tn.config.driver = _tx.drv
	return tn
}

// String implements the fmt.Stringer.
func (tn *TxNum) String() string {
	var builder strings.Builder
	builder.WriteString("TxNum(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tn.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", tn.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", tn.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", tn.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("time_at=")
	builder.WriteString(fmt.Sprintf("%v", tn.TimeAt))
	builder.WriteString(", ")
	builder.WriteString("num=")
	builder.WriteString(fmt.Sprintf("%v", tn.Num))
	builder.WriteByte(')')
	return builder.String()
}

// TxNums is a parsable slice of TxNum.
type TxNums []*TxNum

func (tn TxNums) config(cfg config) {
	for _i := range tn {
		tn[_i].config = cfg
	}
}
