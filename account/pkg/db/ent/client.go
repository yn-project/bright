// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/google/uuid"
	"yun.tea/block/bright/account/pkg/db/ent/migrate"

	"yun.tea/block/bright/account/pkg/db/ent/account"
	"yun.tea/block/bright/account/pkg/db/ent/blocknum"
	"yun.tea/block/bright/account/pkg/db/ent/txnum"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Account is the client for interacting with the Account builders.
	Account *AccountClient
	// BlockNum is the client for interacting with the BlockNum builders.
	BlockNum *BlockNumClient
	// TxNum is the client for interacting with the TxNum builders.
	TxNum *TxNumClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Account = NewAccountClient(c.config)
	c.BlockNum = NewBlockNumClient(c.config)
	c.TxNum = NewTxNumClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Account:  NewAccountClient(cfg),
		BlockNum: NewBlockNumClient(cfg),
		TxNum:    NewTxNumClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Account:  NewAccountClient(cfg),
		BlockNum: NewBlockNumClient(cfg),
		TxNum:    NewTxNumClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Account.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Account.Use(hooks...)
	c.BlockNum.Use(hooks...)
	c.TxNum.Use(hooks...)
}

// AccountClient is a client for the Account schema.
type AccountClient struct {
	config
}

// NewAccountClient returns a client for the Account from the given config.
func NewAccountClient(c config) *AccountClient {
	return &AccountClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `account.Hooks(f(g(h())))`.
func (c *AccountClient) Use(hooks ...Hook) {
	c.hooks.Account = append(c.hooks.Account, hooks...)
}

// Create returns a builder for creating a Account entity.
func (c *AccountClient) Create() *AccountCreate {
	mutation := newAccountMutation(c.config, OpCreate)
	return &AccountCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Account entities.
func (c *AccountClient) CreateBulk(builders ...*AccountCreate) *AccountCreateBulk {
	return &AccountCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Account.
func (c *AccountClient) Update() *AccountUpdate {
	mutation := newAccountMutation(c.config, OpUpdate)
	return &AccountUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccountClient) UpdateOne(a *Account) *AccountUpdateOne {
	mutation := newAccountMutation(c.config, OpUpdateOne, withAccount(a))
	return &AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccountClient) UpdateOneID(id uuid.UUID) *AccountUpdateOne {
	mutation := newAccountMutation(c.config, OpUpdateOne, withAccountID(id))
	return &AccountUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Account.
func (c *AccountClient) Delete() *AccountDelete {
	mutation := newAccountMutation(c.config, OpDelete)
	return &AccountDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AccountClient) DeleteOne(a *Account) *AccountDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *AccountClient) DeleteOneID(id uuid.UUID) *AccountDeleteOne {
	builder := c.Delete().Where(account.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccountDeleteOne{builder}
}

// Query returns a query builder for Account.
func (c *AccountClient) Query() *AccountQuery {
	return &AccountQuery{
		config: c.config,
	}
}

// Get returns a Account entity by its id.
func (c *AccountClient) Get(ctx context.Context, id uuid.UUID) (*Account, error) {
	return c.Query().Where(account.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccountClient) GetX(ctx context.Context, id uuid.UUID) *Account {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AccountClient) Hooks() []Hook {
	hooks := c.hooks.Account
	return append(hooks[:len(hooks):len(hooks)], account.Hooks[:]...)
}

// BlockNumClient is a client for the BlockNum schema.
type BlockNumClient struct {
	config
}

// NewBlockNumClient returns a client for the BlockNum from the given config.
func NewBlockNumClient(c config) *BlockNumClient {
	return &BlockNumClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `blocknum.Hooks(f(g(h())))`.
func (c *BlockNumClient) Use(hooks ...Hook) {
	c.hooks.BlockNum = append(c.hooks.BlockNum, hooks...)
}

// Create returns a builder for creating a BlockNum entity.
func (c *BlockNumClient) Create() *BlockNumCreate {
	mutation := newBlockNumMutation(c.config, OpCreate)
	return &BlockNumCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BlockNum entities.
func (c *BlockNumClient) CreateBulk(builders ...*BlockNumCreate) *BlockNumCreateBulk {
	return &BlockNumCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BlockNum.
func (c *BlockNumClient) Update() *BlockNumUpdate {
	mutation := newBlockNumMutation(c.config, OpUpdate)
	return &BlockNumUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BlockNumClient) UpdateOne(bn *BlockNum) *BlockNumUpdateOne {
	mutation := newBlockNumMutation(c.config, OpUpdateOne, withBlockNum(bn))
	return &BlockNumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BlockNumClient) UpdateOneID(id uint32) *BlockNumUpdateOne {
	mutation := newBlockNumMutation(c.config, OpUpdateOne, withBlockNumID(id))
	return &BlockNumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BlockNum.
func (c *BlockNumClient) Delete() *BlockNumDelete {
	mutation := newBlockNumMutation(c.config, OpDelete)
	return &BlockNumDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *BlockNumClient) DeleteOne(bn *BlockNum) *BlockNumDeleteOne {
	return c.DeleteOneID(bn.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *BlockNumClient) DeleteOneID(id uint32) *BlockNumDeleteOne {
	builder := c.Delete().Where(blocknum.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BlockNumDeleteOne{builder}
}

// Query returns a query builder for BlockNum.
func (c *BlockNumClient) Query() *BlockNumQuery {
	return &BlockNumQuery{
		config: c.config,
	}
}

// Get returns a BlockNum entity by its id.
func (c *BlockNumClient) Get(ctx context.Context, id uint32) (*BlockNum, error) {
	return c.Query().Where(blocknum.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BlockNumClient) GetX(ctx context.Context, id uint32) *BlockNum {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BlockNumClient) Hooks() []Hook {
	hooks := c.hooks.BlockNum
	return append(hooks[:len(hooks):len(hooks)], blocknum.Hooks[:]...)
}

// TxNumClient is a client for the TxNum schema.
type TxNumClient struct {
	config
}

// NewTxNumClient returns a client for the TxNum from the given config.
func NewTxNumClient(c config) *TxNumClient {
	return &TxNumClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `txnum.Hooks(f(g(h())))`.
func (c *TxNumClient) Use(hooks ...Hook) {
	c.hooks.TxNum = append(c.hooks.TxNum, hooks...)
}

// Create returns a builder for creating a TxNum entity.
func (c *TxNumClient) Create() *TxNumCreate {
	mutation := newTxNumMutation(c.config, OpCreate)
	return &TxNumCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TxNum entities.
func (c *TxNumClient) CreateBulk(builders ...*TxNumCreate) *TxNumCreateBulk {
	return &TxNumCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TxNum.
func (c *TxNumClient) Update() *TxNumUpdate {
	mutation := newTxNumMutation(c.config, OpUpdate)
	return &TxNumUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TxNumClient) UpdateOne(tn *TxNum) *TxNumUpdateOne {
	mutation := newTxNumMutation(c.config, OpUpdateOne, withTxNum(tn))
	return &TxNumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TxNumClient) UpdateOneID(id uint32) *TxNumUpdateOne {
	mutation := newTxNumMutation(c.config, OpUpdateOne, withTxNumID(id))
	return &TxNumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TxNum.
func (c *TxNumClient) Delete() *TxNumDelete {
	mutation := newTxNumMutation(c.config, OpDelete)
	return &TxNumDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TxNumClient) DeleteOne(tn *TxNum) *TxNumDeleteOne {
	return c.DeleteOneID(tn.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TxNumClient) DeleteOneID(id uint32) *TxNumDeleteOne {
	builder := c.Delete().Where(txnum.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TxNumDeleteOne{builder}
}

// Query returns a query builder for TxNum.
func (c *TxNumClient) Query() *TxNumQuery {
	return &TxNumQuery{
		config: c.config,
	}
}

// Get returns a TxNum entity by its id.
func (c *TxNumClient) Get(ctx context.Context, id uint32) (*TxNum, error) {
	return c.Query().Where(txnum.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TxNumClient) GetX(ctx context.Context, id uint32) *TxNum {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TxNumClient) Hooks() []Hook {
	hooks := c.hooks.TxNum
	return append(hooks[:len(hooks):len(hooks)], txnum.Hooks[:]...)
}
