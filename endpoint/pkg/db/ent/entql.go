// Code generated by ent, DO NOT EDIT.

package ent

import (
	"yun.tea/block/bright/endpoint/pkg/db/ent/endpoint"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   endpoint.Table,
			Columns: endpoint.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: endpoint.FieldID,
			},
		},
		Type: "Endpoint",
		Fields: map[string]*sqlgraph.FieldSpec{
			endpoint.FieldCreatedAt: {Type: field.TypeUint32, Column: endpoint.FieldCreatedAt},
			endpoint.FieldUpdatedAt: {Type: field.TypeUint32, Column: endpoint.FieldUpdatedAt},
			endpoint.FieldDeletedAt: {Type: field.TypeUint32, Column: endpoint.FieldDeletedAt},
			endpoint.FieldAddress:   {Type: field.TypeString, Column: endpoint.FieldAddress},
			endpoint.FieldState:     {Type: field.TypeString, Column: endpoint.FieldState},
			endpoint.FieldRemark:    {Type: field.TypeString, Column: endpoint.FieldRemark},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (eq *EndpointQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EndpointQuery builder.
func (eq *EndpointQuery) Filter() *EndpointFilter {
	return &EndpointFilter{config: eq.config, predicateAdder: eq}
}

// addPredicate implements the predicateAdder interface.
func (m *EndpointMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EndpointMutation builder.
func (m *EndpointMutation) Filter() *EndpointFilter {
	return &EndpointFilter{config: m.config, predicateAdder: m}
}

// EndpointFilter provides a generic filtering capability at runtime for EndpointQuery.
type EndpointFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EndpointFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *EndpointFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(endpoint.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *EndpointFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(endpoint.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *EndpointFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(endpoint.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *EndpointFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(endpoint.FieldDeletedAt))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *EndpointFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(endpoint.FieldAddress))
}

// WhereState applies the entql string predicate on the state field.
func (f *EndpointFilter) WhereState(p entql.StringP) {
	f.Where(p.Field(endpoint.FieldState))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *EndpointFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(endpoint.FieldRemark))
}
