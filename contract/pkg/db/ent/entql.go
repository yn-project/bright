// Code generated by ent, DO NOT EDIT.

package ent

import (
	"yun.tea/block/bright/contract/pkg/db/ent/contract"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   contract.Table,
			Columns: contract.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: contract.FieldID,
			},
		},
		Type: "Contract",
		Fields: map[string]*sqlgraph.FieldSpec{
			contract.FieldCreatedAt: {Type: field.TypeUint32, Column: contract.FieldCreatedAt},
			contract.FieldUpdatedAt: {Type: field.TypeUint32, Column: contract.FieldUpdatedAt},
			contract.FieldDeletedAt: {Type: field.TypeUint32, Column: contract.FieldDeletedAt},
			contract.FieldName:      {Type: field.TypeString, Column: contract.FieldName},
			contract.FieldAddress:   {Type: field.TypeString, Column: contract.FieldAddress},
			contract.FieldRemark:    {Type: field.TypeString, Column: contract.FieldRemark},
			contract.FieldVersion:   {Type: field.TypeString, Column: contract.FieldVersion},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (cq *ContractQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ContractQuery builder.
func (cq *ContractQuery) Filter() *ContractFilter {
	return &ContractFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *ContractMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ContractMutation builder.
func (m *ContractMutation) Filter() *ContractFilter {
	return &ContractFilter{config: m.config, predicateAdder: m}
}

// ContractFilter provides a generic filtering capability at runtime for ContractQuery.
type ContractFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ContractFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *ContractFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(contract.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *ContractFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(contract.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *ContractFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(contract.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *ContractFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(contract.FieldDeletedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *ContractFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(contract.FieldName))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *ContractFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(contract.FieldAddress))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *ContractFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(contract.FieldRemark))
}

// WhereVersion applies the entql string predicate on the version field.
func (f *ContractFilter) WhereVersion(p entql.StringP) {
	f.Where(p.Field(contract.FieldVersion))
}
